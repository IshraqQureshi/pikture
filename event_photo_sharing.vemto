{"tables":{"basicrelationships":{"basicrelationships":{"count":12,"lastPrimaryKey":18,"index":{"7":{"hasMany":{"basicrelationships.inverseId":[8]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"8":{"hasMany":{"basicrelationships.inverseId":[7],"inputs.relationshipId":[30]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"9":{"hasMany":{"basicrelationships.inverseId":[10]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"10":{"hasMany":{"basicrelationships.inverseId":[9],"inputs.relationshipId":[26]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"11":{"hasMany":{"basicrelationships.inverseId":[12]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"12":{"hasMany":{"basicrelationships.inverseId":[11],"inputs.relationshipId":[40]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"13":{"hasMany":{"basicrelationships.inverseId":[14]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"14":{"hasMany":{"basicrelationships.inverseId":[13],"inputs.relationshipId":[44]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"15":{"hasMany":{"basicrelationships.inverseId":[16]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"16":{"hasMany":{"basicrelationships.inverseId":[15],"inputs.relationshipId":[39]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"17":{"hasMany":{"basicrelationships.inverseId":[18]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"18":{"hasMany":{"basicrelationships.inverseId":[17],"inputs.relationshipId":[43]},"hasOne":{},"belongsTo":{},"belongsToMany":{}}},"additionalIndexes":{},"items":[],"relations":[],"reladbVersion":"0.3.1"},"item_14":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":15,"inverseId":13,"localModelId":16,"parentKeyId":67,"foreignKeyId":70,"name":"photo","type":"belongsTo","foreignOriginalName":"photo_id","hasApi":true,"defaultName":"photo","usingFirstDefaultName":true,"id":14,"createdAt":"2023-06-26 10:49:11","updatedAt":"2023-06-26 10:49:11"},"item_13":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":16,"inverseId":14,"localModelId":15,"parentKeyId":67,"foreignKeyId":70,"name":"comments","type":"hasMany","foreignOriginalName":"photo_id","hasApi":true,"defaultName":"comments","usingFirstDefaultName":true,"id":13,"createdAt":"2023-06-26 10:49:11","updatedAt":"2023-06-26 10:49:11"},"item_12":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":14,"inverseId":11,"localModelId":15,"parentKeyId":63,"foreignKeyId":68,"name":"event","type":"belongsTo","foreignOriginalName":"event_id","hasApi":true,"defaultName":"event","usingFirstDefaultName":true,"id":12,"createdAt":"2023-06-26 10:42:11","updatedAt":"2023-06-26 10:42:11"},"item_11":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":15,"inverseId":12,"localModelId":14,"parentKeyId":63,"foreignKeyId":68,"name":"photos","type":"hasMany","foreignOriginalName":"event_id","hasApi":true,"defaultName":"photos","usingFirstDefaultName":true,"id":11,"createdAt":"2023-06-26 10:42:11","updatedAt":"2023-06-26 10:42:11"},"item_18":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":14,"inverseId":17,"localModelId":17,"parentKeyId":63,"foreignKeyId":78,"name":"event","type":"belongsTo","foreignOriginalName":"event_id","hasApi":true,"defaultName":"event","usingFirstDefaultName":true,"id":18,"createdAt":"2023-06-26 11:15:36","updatedAt":"2023-06-26 11:15:36"},"item_17":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":17,"inverseId":18,"localModelId":14,"parentKeyId":63,"foreignKeyId":78,"name":"invitations","type":"hasMany","foreignOriginalName":"event_id","hasApi":true,"defaultName":"invitations","usingFirstDefaultName":true,"id":17,"createdAt":"2023-06-26 11:15:36","updatedAt":"2023-06-26 11:15:36"},"item_16":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":13,"inverseId":15,"localModelId":14,"parentKeyId":57,"foreignKeyId":76,"name":"user","type":"belongsTo","foreignOriginalName":"user_id","hasApi":true,"defaultName":"user","usingFirstDefaultName":true,"id":16,"createdAt":"2023-06-26 10:56:52","updatedAt":"2023-06-26 10:56:52"},"item_15":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":14,"inverseId":16,"localModelId":13,"parentKeyId":57,"foreignKeyId":76,"name":"events","type":"hasMany","foreignOriginalName":"user_id","hasApi":true,"defaultName":"events","usingFirstDefaultName":true,"id":15,"createdAt":"2023-06-26 10:56:52","updatedAt":"2023-06-26 10:56:52"}},"cruds":{"cruds":{"count":8,"lastPrimaryKey":15,"index":{"8":{"hasMany":{"inputs.crudId":[21,31]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"9":{"hasMany":{"inputs.crudId":[26,24,23,25]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"10":{"hasMany":{"inputs.crudId":[29,30,28,27]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"11":{"hasMany":{"inputs.crudId":[32,33,34]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"12":{"hasMany":{"inputs.crudId":[38,39,35,37,36]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"13":{"hasMany":{"inputs.crudId":[40,41]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"14":{"hasMany":{"inputs.crudId":[42,43]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"15":{"hasMany":{"inputs.crudId":[45,44]},"hasOne":{},"belongsTo":{},"belongsToMany":{}}},"additionalIndexes":{},"items":[],"relations":[],"reladbVersion":"0.3.1"},"item_11":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"Users","url":"users","modelId":13,"projectId":5,"hasManyDetailId":null,"manyToManyDetailId":null,"titles":{"index":"Users List","create":"Create User","edit":"Edit User","update":"Update User","show":"Show User","new":"New User"},"hasApi":true,"isHasManyDetail":false,"isManyToManyDetail":false,"isForLivewire":false,"id":11,"createdAt":"2023-06-26 11:44:03","updatedAt":"2023-06-26 11:44:03"},"item_12":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"Events","url":"events","modelId":14,"projectId":5,"hasManyDetailId":null,"manyToManyDetailId":null,"titles":{"index":"Events List","create":"Create Event","edit":"Edit Event","update":"Update Event","show":"Show Event","new":"New Event"},"hasApi":true,"isHasManyDetail":false,"isManyToManyDetail":false,"isForLivewire":false,"id":12,"createdAt":"2023-06-26 11:54:28","updatedAt":"2023-06-26 11:54:28"},"item_13":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"Photos","url":"photos","modelId":15,"projectId":5,"hasManyDetailId":null,"manyToManyDetailId":null,"titles":{"index":"Photos List","create":"Create Photo","edit":"Edit Photo","update":"Update Photo","show":"Show Photo","new":"New Photo"},"hasApi":true,"isHasManyDetail":false,"isManyToManyDetail":false,"isForLivewire":false,"id":13,"createdAt":"2023-06-26 13:37:54","updatedAt":"2023-06-26 13:37:54"},"item_14":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"Invitations","url":"invitations","modelId":17,"projectId":5,"hasManyDetailId":null,"manyToManyDetailId":null,"titles":{"index":"Invitations List","create":"Create Invitation","edit":"Edit Invitation","update":"Update Invitation","show":"Show Invitation","new":"New Invitation"},"hasApi":true,"isHasManyDetail":false,"isManyToManyDetail":false,"isForLivewire":false,"id":14,"createdAt":"2023-06-26 13:38:42","updatedAt":"2023-06-26 13:38:42"},"item_15":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"Comments","url":"comments","modelId":16,"projectId":5,"hasManyDetailId":null,"manyToManyDetailId":null,"titles":{"index":"Comments List","create":"Create Comment","edit":"Edit Comment","update":"Update Comment","show":"Show Comment","new":"New Comment"},"hasApi":true,"isHasManyDetail":false,"isManyToManyDetail":false,"isForLivewire":false,"id":15,"createdAt":"2023-06-26 13:39:11","updatedAt":"2023-06-26 13:39:11"}},"entities":{"entities":{"count":9,"lastPrimaryKey":17,"index":{"9":{"hasMany":{"fields.entityId":[37,38,39,40,41,42],"projects.authModelId":[4]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"10":{"hasMany":{"fields.entityId":[43,46,47],"foreigns.relatedEntityId":[4,5],"basicrelationships.localModelId":[7,9],"basicrelationships.modelId":[8,10],"cruds.modelId":[8]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"11":{"hasMany":{"fields.entityId":[44,54,55,56,53],"basicrelationships.modelId":[9],"basicrelationships.localModelId":[10],"cruds.modelId":[9]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"12":{"hasMany":{"fields.entityId":[45,50,51,52,49],"basicrelationships.modelId":[7],"basicrelationships.localModelId":[8],"cruds.modelId":[10]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"13":{"hasMany":{"fields.entityId":[57,58,59,60,61,62],"projects.authModelId":[5],"foreigns.relatedEntityId":[8],"basicrelationships.localModelId":[15],"basicrelationships.modelId":[16],"cruds.modelId":[11]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"14":{"hasMany":{"fields.entityId":[63,66,76,64,75,65],"foreigns.relatedEntityId":[6,9],"basicrelationships.localModelId":[11,16,17],"basicrelationships.modelId":[12,15,18],"cruds.modelId":[12]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"15":{"hasMany":{"fields.entityId":[67,68,73],"basicrelationships.modelId":[11,14],"basicrelationships.localModelId":[12,13],"foreigns.relatedEntityId":[7],"morphrelationships.modelId":[],"cruds.modelId":[13]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"16":{"hasMany":{"fields.entityId":[69,70,74],"basicrelationships.modelId":[13],"basicrelationships.localModelId":[14],"morphrelationships.localModelId":[],"cruds.modelId":[15]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"17":{"hasMany":{"fields.entityId":[77,78,79],"basicrelationships.modelId":[17],"basicrelationships.localModelId":[18],"cruds.modelId":[14]},"hasOne":{},"belongsTo":{},"belongsToMany":{}}},"additionalIndexes":{},"items":[],"relations":[],"reladbVersion":"0.3.1"},"item_16":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"Comment","type":"model","plural":"Comments","pluralAndSingularAreSame":false,"table":"comments","projectId":5,"top":"555px","left":"796px","pivot":false,"softDeletes":false,"timestamps":true,"needsCentralization":false,"migrationName":"2023_06_26_000001_create_comments_table.php","foreignsMigrationName":"2023_06_26_009001_add_foreigns_to_comments_table.php","generatesMigration":true,"oldMigrationName":null,"oldForeignsMigrationName":null,"id":16,"createdAt":"2023-06-26 10:48:57","updatedAt":"2023-06-26 11:40:10"},"item_14":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"Event","type":"model","plural":"Events","pluralAndSingularAreSame":false,"table":"events","projectId":5,"top":"115px","left":"414px","pivot":false,"softDeletes":false,"timestamps":true,"needsCentralization":false,"migrationName":"2023_06_26_000002_create_events_table.php","foreignsMigrationName":"2023_06_26_009002_add_foreigns_to_events_table.php","generatesMigration":true,"oldMigrationName":null,"oldForeignsMigrationName":null,"id":14,"createdAt":"2023-06-26 10:37:19","updatedAt":"2023-06-26 13:33:58"},"item_17":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"Invitation","type":"model","plural":"Invitations","pluralAndSingularAreSame":false,"table":"invitations","projectId":5,"top":"180px","left":"785px","pivot":false,"softDeletes":false,"timestamps":true,"needsCentralization":false,"migrationName":"2023_06_26_000003_create_invitations_table.php","foreignsMigrationName":"2023_06_26_009003_add_foreigns_to_invitations_table.php","generatesMigration":true,"oldMigrationName":null,"oldForeignsMigrationName":null,"id":17,"createdAt":"2023-06-26 11:14:34","updatedAt":"2023-06-26 11:40:11"},"item_15":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"Photo","type":"model","plural":"Photos","pluralAndSingularAreSame":false,"table":"photos","projectId":5,"top":"577px","left":"327px","pivot":false,"softDeletes":false,"timestamps":true,"needsCentralization":false,"migrationName":"2023_06_26_000004_create_photos_table.php","foreignsMigrationName":"2023_06_26_009004_add_foreigns_to_photos_table.php","generatesMigration":true,"oldMigrationName":null,"oldForeignsMigrationName":null,"id":15,"createdAt":"2023-06-26 10:41:55","updatedAt":"2023-06-26 11:40:11"},"item_13":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"projectId":5,"name":"User","type":"model","table":"users","plural":"Users","top":"149px","left":"42px","pivot":false,"softDeletes":false,"timestamps":true,"needsCentralization":false,"pluralAndSingularAreSame":false,"migrationName":"2014_10_12_000000_create_users_table.php","foreignsMigrationName":null,"generatesMigration":true,"oldMigrationName":null,"oldForeignsMigrationName":null,"id":13,"createdAt":"2023-06-26 10:32:03","updatedAt":"2023-06-26 11:40:10"}},"fields":{"fields":{"count":40,"lastPrimaryKey":80,"index":{"37":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"38":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"39":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"40":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"41":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"42":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"43":{"hasMany":{"foreigns.relatedFieldId":[4,5],"basicrelationships.parentKeyId":[8,7,10,9]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"44":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"45":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"46":{"hasMany":{"inputs.fieldId":[21]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"47":{"hasMany":{"inputs.fieldId":[31]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"49":{"hasMany":{"inputs.fieldId":[27]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"50":{"hasMany":{"inputs.fieldId":[28]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"51":{"hasMany":{"inputs.fieldId":[29]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"52":{"hasMany":{"foreigns.fieldId":[4],"basicrelationships.foreignKeyId":[8,7],"inputs.fieldId":[30]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"53":{"hasMany":{"inputs.fieldId":[23]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"54":{"hasMany":{"inputs.fieldId":[24]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"55":{"hasMany":{"inputs.fieldId":[25]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"56":{"hasMany":{"foreigns.fieldId":[5],"basicrelationships.foreignKeyId":[10,9],"inputs.fieldId":[26]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"57":{"hasMany":{"foreigns.relatedFieldId":[8],"basicrelationships.parentKeyId":[16,15]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"58":{"hasMany":{"inputs.fieldId":[32]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"59":{"hasMany":{"inputs.fieldId":[33]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"60":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"61":{"hasMany":{"inputs.fieldId":[34]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"62":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"63":{"hasMany":{"foreigns.relatedFieldId":[6,9],"basicrelationships.parentKeyId":[12,11,18,17]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"64":{"hasMany":{"inputs.fieldId":[35]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"65":{"hasMany":{"inputs.fieldId":[36]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"66":{"hasMany":{"inputs.fieldId":[38]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"67":{"hasMany":{"foreigns.relatedFieldId":[7],"basicrelationships.parentKeyId":[14,13]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"68":{"hasMany":{"foreigns.fieldId":[6],"basicrelationships.foreignKeyId":[12,11],"inputs.fieldId":[40]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"69":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"70":{"hasMany":{"foreigns.fieldId":[7],"basicrelationships.foreignKeyId":[14,13],"inputs.fieldId":[44]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"73":{"hasMany":{"inputs.fieldId":[41]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"74":{"hasMany":{"inputs.fieldId":[45]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"75":{"hasMany":{"inputs.fieldId":[37]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"76":{"hasMany":{"foreigns.fieldId":[8],"basicrelationships.foreignKeyId":[16,15],"inputs.fieldId":[39]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"77":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"78":{"hasMany":{"foreigns.fieldId":[9],"basicrelationships.foreignKeyId":[18,17],"inputs.fieldId":[43]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"79":{"hasMany":{"inputs.fieldId":[42]},"hasOne":{},"belongsTo":{},"belongsToMany":{}}},"additionalIndexes":{},"items":[],"relations":[],"reladbVersion":"0.3.1"},"item_69":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"id","entityId":16,"type":"bigIncrements","pk":true,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":false,"defaultValue":null,"index":false,"unique":false,"id":69,"createdAt":"2023-06-26 10:48:57","updatedAt":"2023-06-26 10:48:57","order":0},"item_70":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"photo_id","entityId":16,"type":"unsignedBigInteger","pk":false,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"id":70,"createdAt":"2023-06-26 10:49:11","updatedAt":"2023-06-26 10:49:11","order":1},"item_74":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"comment","entityId":16,"type":"text","pk":false,"fk":false,"params":{"options":null},"faker":"$faker->text()","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"order":2,"id":74,"createdAt":"2023-06-26 10:51:23","updatedAt":"2023-06-26 10:51:34"},"item_63":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"id","entityId":14,"type":"bigIncrements","pk":true,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":false,"defaultValue":null,"index":false,"unique":false,"id":63,"createdAt":"2023-06-26 10:37:19","updatedAt":"2023-06-26 10:56:33","order":0},"item_64":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"gallery_name","entityId":14,"type":"string","pk":false,"fk":false,"params":{"size":"","options":null},"faker":"$faker->text(15)","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"order":1,"id":64,"createdAt":"2023-06-26 10:38:13","updatedAt":"2023-06-26 13:35:03"},"item_65":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"max_photos","entityId":14,"type":"integer","pk":false,"fk":false,"params":{"options":null},"faker":"$faker->randomNumber()","nullable":true,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"order":2,"id":65,"createdAt":"2023-06-26 10:38:36","updatedAt":"2023-06-26 13:36:50"},"item_75":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"max_users","entityId":14,"type":"integer","pk":false,"fk":false,"params":{"options":null},"faker":"$faker->randomNumber()","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"order":3,"id":75,"createdAt":"2023-06-26 10:56:16","updatedAt":"2023-06-26 13:36:47"},"item_66":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"expiration_date","entityId":14,"type":"date","pk":false,"fk":false,"params":{"options":null},"faker":"$faker->date()","nullable":true,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"order":4,"id":66,"createdAt":"2023-06-26 10:39:08","updatedAt":"2023-06-26 10:56:33"},"item_76":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"user_id","entityId":14,"type":"unsignedBigInteger","pk":false,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"id":76,"createdAt":"2023-06-26 10:56:52","updatedAt":"2023-06-26 10:56:52","order":5},"item_77":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"id","entityId":17,"type":"bigIncrements","pk":true,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":false,"defaultValue":null,"index":false,"unique":false,"id":77,"createdAt":"2023-06-26 11:14:34","updatedAt":"2023-06-26 11:15:48","order":0},"item_79":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"email","entityId":17,"type":"string","pk":false,"fk":false,"params":{},"faker":"$faker->email()","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"order":1,"id":79,"createdAt":"2023-06-26 11:15:41","updatedAt":"2023-06-26 11:15:54"},"item_78":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"event_id","entityId":17,"type":"unsignedBigInteger","pk":false,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"id":78,"createdAt":"2023-06-26 11:15:36","updatedAt":"2023-06-26 11:15:48","order":2},"item_67":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"id","entityId":15,"type":"bigIncrements","pk":true,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":false,"defaultValue":null,"index":false,"unique":false,"id":67,"createdAt":"2023-06-26 10:41:55","updatedAt":"2023-06-26 10:41:55","order":0},"item_68":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"event_id","entityId":15,"type":"unsignedBigInteger","pk":false,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"id":68,"createdAt":"2023-06-26 10:42:11","updatedAt":"2023-06-26 10:42:11","order":1},"item_73":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"photo","entityId":15,"type":"string","pk":false,"fk":false,"params":{"options":null},"faker":"$faker->text(10)","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"order":2,"id":73,"createdAt":"2023-06-26 10:50:27","updatedAt":"2023-06-26 13:37:18"},"item_57":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"id","entityId":13,"type":"bigIncrements","pk":true,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":false,"defaultValue":null,"index":false,"unique":false,"id":57,"createdAt":"2023-06-26 10:32:03","updatedAt":"2023-06-26 10:32:03","order":0},"item_58":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"name","entityId":13,"type":"string","pk":false,"fk":false,"params":{},"faker":"$faker->name()","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"id":58,"createdAt":"2023-06-26 10:32:03","updatedAt":"2023-06-26 10:32:03","order":1},"item_59":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"email","entityId":13,"type":"string","pk":false,"fk":false,"params":{},"faker":"$faker->unique->email()","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":true,"id":59,"createdAt":"2023-06-26 10:32:03","updatedAt":"2023-06-26 10:32:03","order":2},"item_60":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"email_verified_at","entityId":13,"type":"timestamp","pk":false,"fk":false,"params":{},"faker":"now()","nullable":true,"hidden":false,"fillable":false,"defaultValue":null,"index":false,"unique":false,"id":60,"createdAt":"2023-06-26 10:32:03","updatedAt":"2023-06-26 10:32:04","order":3},"item_61":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"password","entityId":13,"type":"string","pk":false,"fk":false,"params":{},"faker":"\\Hash::make('password')","nullable":false,"hidden":true,"fillable":true,"defaultValue":null,"index":false,"unique":false,"id":61,"createdAt":"2023-06-26 10:32:04","updatedAt":"2023-06-26 10:32:04","order":4},"item_62":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"remember_token","entityId":13,"type":"string","pk":false,"fk":false,"params":{"size":100},"faker":"Str::random(10)","nullable":true,"hidden":true,"fillable":false,"defaultValue":null,"index":false,"unique":false,"id":62,"createdAt":"2023-06-26 10:32:04","updatedAt":"2023-06-26 10:32:04","order":5}},"foreigns":{"foreigns":{"count":6,"lastPrimaryKey":9,"index":{"4":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"5":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"6":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"7":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"8":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"9":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}}},"additionalIndexes":{},"items":[],"relations":[],"reladbVersion":"0.3.1"},"item_7":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"","fieldId":70,"relatedEntityId":15,"relatedFieldId":67,"basicRelationshipId":null,"on":"","onTableDelete":"CASCADE","onTableUpdate":"CASCADE","indexName":"comment_photo_id_foreign","defaultIndexName":"comment_photo_id_foreign","id":7,"createdAt":"2023-06-26 10:49:11","updatedAt":"2023-06-26 10:49:11"},"item_6":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"","fieldId":68,"relatedEntityId":14,"relatedFieldId":63,"basicRelationshipId":null,"on":"","onTableDelete":"CASCADE","onTableUpdate":"CASCADE","indexName":"photo_event_id_foreign","defaultIndexName":"photo_event_id_foreign","id":6,"createdAt":"2023-06-26 10:42:11","updatedAt":"2023-06-26 10:42:11"},"item_9":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"","fieldId":78,"relatedEntityId":14,"relatedFieldId":63,"basicRelationshipId":null,"on":"","onTableDelete":"CASCADE","onTableUpdate":"CASCADE","indexName":"invitation_event_id_foreign","defaultIndexName":"invitation_event_id_foreign","id":9,"createdAt":"2023-06-26 11:15:36","updatedAt":"2023-06-26 11:15:36"},"item_8":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"","fieldId":76,"relatedEntityId":13,"relatedFieldId":57,"basicRelationshipId":null,"on":"","onTableDelete":"CASCADE","onTableUpdate":"CASCADE","indexName":"event_user_id_foreign","defaultIndexName":"event_user_id_foreign","id":8,"createdAt":"2023-06-26 10:56:52","updatedAt":"2023-06-26 10:56:52"}},"inputs":{"inputs":{"count":24,"lastPrimaryKey":45,"index":{"21":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"23":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"24":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"25":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"26":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"27":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"28":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"29":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"30":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"31":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"32":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"33":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"34":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"35":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"36":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"37":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"38":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"39":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"40":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"41":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"42":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"43":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"44":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"45":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}}},"additionalIndexes":{},"items":[],"relations":[],"reladbVersion":"0.3.1"},"item_32":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":11,"fieldId":58,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"name","label":"Name","placeholder":"Name","order":1,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"text","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","max:255","string"],"updateValidation":["required","max:255","string"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":32,"createdAt":"2023-06-26 11:44:03","updatedAt":"2023-06-26 11:44:03"},"item_33":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":11,"fieldId":59,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"email","label":"Email","placeholder":"Email","order":2,"cols":12,"colsMedium":12,"colsLarge":"6","readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"email","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","unique:users,email","email"],"updateValidation":["required","unique:users,email","email"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":33,"createdAt":"2023-06-26 11:44:03","updatedAt":"2023-06-26 13:22:32"},"item_34":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":11,"fieldId":61,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"password","label":"Password","placeholder":"Password","order":3,"cols":12,"colsMedium":12,"colsLarge":"6","readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"password","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required"],"updateValidation":["nullable"],"onCreate":true,"onUpdate":true,"onShow":false,"onIndex":false,"onForms":true,"dependentSelectId":null,"id":34,"createdAt":"2023-06-26 11:44:03","updatedAt":"2023-06-26 13:23:37"},"item_35":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":12,"fieldId":64,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"gallery_name","label":"Gallery Name","placeholder":"Gallery Name","order":1,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"text","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","max:255","string"],"updateValidation":["required","max:255","string"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":35,"createdAt":"2023-06-26 11:54:28","updatedAt":"2023-06-26 13:35:04"},"item_36":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":12,"fieldId":65,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"max_photos","label":"Max Photos","placeholder":"Max Photos","order":2,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"number","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["nullable","numeric"],"updateValidation":["nullable","numeric"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":36,"createdAt":"2023-06-26 11:54:28","updatedAt":"2023-06-26 13:36:50"},"item_37":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":12,"fieldId":75,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"max_users","label":"Max Users","placeholder":"Max Users","order":3,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"number","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","numeric"],"updateValidation":["required","numeric"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":37,"createdAt":"2023-06-26 11:54:28","updatedAt":"2023-06-26 13:36:47"},"item_38":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":12,"fieldId":66,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"expiration_date","label":"Expiration Date","placeholder":"Expiration Date","order":4,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"date","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["nullable","date"],"updateValidation":["nullable","date"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":38,"createdAt":"2023-06-26 11:54:28","updatedAt":"2023-06-26 11:54:28"},"item_39":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":12,"fieldId":76,"relationshipId":16,"relationshipCollectionName":"users","foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":"usersForSelect","name":"user_id","label":"User","placeholder":"User","order":5,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"Please select the User","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"select","checked":false,"max":null,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","exists:users,id"],"updateValidation":["required","exists:users,id"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":39,"createdAt":"2023-06-26 11:54:28","updatedAt":"2023-06-26 11:54:28"},"item_40":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":13,"fieldId":68,"relationshipId":12,"relationshipCollectionName":"events","foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":"eventsForSelect","name":"event_id","label":"Event","placeholder":"Event","order":1,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"Please select the Event","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"select","checked":false,"max":null,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","exists:events,id"],"updateValidation":["required","exists:events,id"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":40,"createdAt":"2023-06-26 13:37:54","updatedAt":"2023-06-26 13:37:54"},"item_41":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":13,"fieldId":73,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"photo","label":"Photo","placeholder":"Photo","order":2,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"image","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","file"],"updateValidation":["file","nullable"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":41,"createdAt":"2023-06-26 13:37:54","updatedAt":"2023-06-26 13:37:54"},"item_42":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":14,"fieldId":79,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"email","label":"Email","placeholder":"Email","order":1,"cols":12,"colsMedium":12,"colsLarge":"6","readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"email","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","email"],"updateValidation":["required","email"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":42,"createdAt":"2023-06-26 13:38:42","updatedAt":"2023-06-26 13:38:51"},"item_43":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":14,"fieldId":78,"relationshipId":18,"relationshipCollectionName":"events","foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":"eventsForSelect","name":"event_id","label":"Event","placeholder":"Event","order":2,"cols":12,"colsMedium":12,"colsLarge":"6","readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"Please select the Event","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"select","checked":false,"max":null,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","exists:events,id"],"updateValidation":["required","exists:events,id"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":43,"createdAt":"2023-06-26 13:38:42","updatedAt":"2023-06-26 13:38:54"},"item_44":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":15,"fieldId":70,"relationshipId":14,"relationshipCollectionName":"photos","foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":"photosForSelect","name":"photo_id","label":"Photo","placeholder":"Photo","order":1,"cols":12,"colsMedium":12,"colsLarge":"6","readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"Please select the Photo","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"select","checked":false,"max":null,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","exists:photos,id"],"updateValidation":["required","exists:photos,id"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":44,"createdAt":"2023-06-26 13:39:11","updatedAt":"2023-06-26 13:39:29"},"item_45":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":15,"fieldId":74,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"comment","label":"Comment","placeholder":"Comment","order":2,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"textarea","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","max:255","string"],"updateValidation":["required","max:255","string"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":45,"createdAt":"2023-06-26 13:39:11","updatedAt":"2023-06-26 13:39:11"}},"morphrelationships":{"morphrelationships":{"count":0,"lastPrimaryKey":1,"index":{},"additionalIndexes":{},"items":[],"relations":[],"reladbVersion":"0.3.1"}},"projects":{"projects":{"count":2,"lastPrimaryKey":5,"index":{"4":{"hasMany":{"entities.projectId":[10,9,12,11],"cruds.projectId":[8,9,10]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"5":{"hasMany":{"entities.projectId":[13,16,17,15,14],"cruds.projectId":[11,12,13,14,15]},"hasOne":{},"belongsTo":{},"belongsToMany":{}}},"additionalIndexes":{},"items":[],"relations":[],"reladbVersion":"0.3.1"},"item_5":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"Event Photo Sharing","url":"http://localhost:8000","mode":"draft","folder":"C:\\xampp2\\htdocs\\Freelance\\vemto","authModelId":13,"tenancyModelId":null,"settings":{"cssFramework":"bootstrap","theme":"default","uiTemplate":"laravel_ui","mutateDatesToCarbon":true,"authModel":null,"massAssignment":"fillable","validationMode":"array","routesMode":"resource","viewsFormMode":"blade","modelsFolder":"/Models","policiesFolder":"/Policies","servicesFolder":"/Services","requestsFolder":"/Http/Requests","controllersFolder":"/Http/Controllers","apiControllersFolder":"/Http/Controllers/Api","viewsFolder":"/resources/views/app","controllerNameMode":"singular","schemaZoom":1,"schemaScrollTop":4400,"schemaScrollLeft":4400,"turbolinks":true,"modules":[]},"codeSettings":{"options":{"forceGeneration":false,"deleteRemovedModules":true},"base":{"migrations":true,"models":true,"policies":false,"factories":true,"seeders":true,"routes":true,"apiRoutes":true,"apiSanctumAuth":true},"cruds":{"11":{"crudId":11,"name":"Users","requests":true,"controller":true,"views":true,"tests":true,"api":true},"12":{"crudId":12,"name":"Events","requests":true,"controller":true,"views":true,"tests":true,"api":true},"13":{"crudId":13,"name":"Photos","requests":true,"controller":true,"views":true,"tests":true,"api":true},"14":{"crudId":14,"name":"Invitations","requests":true,"controller":true,"views":true,"tests":true,"api":true},"15":{"crudId":15,"name":"Comments","requests":true,"controller":true,"views":true,"tests":true,"api":true}},"modules":{"permissionsApi":false,"permissions":true,"uiTemplate":true},"generationCommands":{"checkDependencies":true,"gitClone":true,"composerInstall":true,"storageLink":true,"npmInstall":true,"compileAssets":true},"runCommands":{"compileAssets":true,"migrate":true,"serve":true,"openBrowser":true}},"connection":{"type":"mysql","host":"127.0.0.1","port":3306,"database":"robin-event","username":"root","password":""},"modules":["auth","permissions","multiTenancy"],"version":"1.3.2","laravelVersion":10,"repositoryUrl":null,"repositoryBranch":null,"files":{".env":{"deleteOnGeneration":true,"content":"APP_NAME=\"Event Photo Sharing\"\nAPP_ENV=local\nAPP_KEY=base64:KGcPaFVugWPoSXBnuFKWiSJAnH3OLZkPjQUgvGucM8E=\nAPP_DEBUG=true\nAPP_URL=http://localhost:8000\n\nLOG_CHANNEL=stack\nLOG_DEPRECATIONS_CHANNEL=null\nLOG_LEVEL=debug\n\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=robin-event\nDB_USERNAME=root\nDB_PASSWORD=\"\"\n\nBROADCAST_DRIVER=log\nCACHE_DRIVER=file\nFILESYSTEM_DISK=local\nQUEUE_CONNECTION=sync\nSESSION_DRIVER=file\nSESSION_LIFETIME=120\nMEMCACHED_HOST=127.0.0.1\n\nREDIS_HOST=127.0.0.1\nREDIS_PASSWORD=null\nREDIS_PORT=6379\n\nMAIL_MAILER=smtp\nMAIL_HOST=mailpit\nMAIL_PORT=1025\nMAIL_USERNAME=null\nMAIL_PASSWORD=null\nMAIL_ENCRYPTION=null\nMAIL_FROM_ADDRESS=\"hello@example.com\"\nMAIL_FROM_NAME=\"${APP_NAME}\"\n\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\nAWS_DEFAULT_REGION=us-east-1\nAWS_BUCKET=\nAWS_USE_PATH_STYLE_ENDPOINT=false\n\nPUSHER_APP_ID=\nPUSHER_APP_KEY=\nPUSHER_APP_SECRET=\nPUSHER_HOST=\nPUSHER_PORT=443\nPUSHER_SCHEME=https\nPUSHER_APP_CLUSTER=mt1\nVITE_APP_NAME=\"${APP_NAME}\"\nVITE_PUSHER_APP_KEY=\"${PUSHER_APP_KEY}\"\nVITE_PUSHER_HOST=\"${PUSHER_HOST}\"\nVITE_PUSHER_PORT=\"${PUSHER_PORT}\"\nVITE_PUSHER_SCHEME=\"${PUSHER_SCHEME}\"\nVITE_PUSHER_APP_CLUSTER=\"${PUSHER_APP_CLUSTER}\"\n","module":"base","path":".env"},"\\app\\Providers\\AuthServiceProvider.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\Facades\\Gate;\nuse Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    /**\n     * The policy mappings for the application.\n     *\n     * @var array<class-string, class-string>\n     */\n    protected $policies = [\n        // 'App\\Models\\Model' => 'App\\Policies\\ModelPolicy',\n    ];\n\n    /**\n     * Register any authentication / authorization services.\n     */\n    public function boot(): void\n    {\n        // Automatically finding the Policies\n        Gate::guessPolicyNamesUsing(function ($modelClass) {\n            return 'App\\\\Policies\\\\' . class_basename($modelClass) . 'Policy';\n        });\n\n        $this->registerPolicies();\n\n        // Implicitly grant \"Super Admin\" role all permission checks using can()\n        Gate::before(function ($user, $ability) {\n            if ($user->isSuperAdmin()) {\n                return true;\n            }\n        });\n    }\n}\n","module":"base","path":"\\app\\Providers\\AuthServiceProvider.php"},"\\app\\Providers\\AppServiceProvider.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Pagination\\Paginator;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Register any application services.\n     */\n    public function register(): void\n    {\n        Paginator::useBootstrap();\n    }\n\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        //\n    }\n}\n","module":"base","path":"\\app\\Providers\\AppServiceProvider.php"},"\\config\\auth.php":{"deleteOnGeneration":true,"content":"<?php\n\nreturn [\n    /*\n    |--------------------------------------------------------------------------\n    | Authentication Defaults\n    |--------------------------------------------------------------------------\n    |\n    | This option controls the default authentication \"guard\" and password\n    | reset options for your application. You may change these defaults\n    | as required, but they're a perfect start for most applications.\n    |\n    */\n\n    'defaults' => [\n        'guard' => 'web',\n        'passwords' => 'users',\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Authentication Guards\n    |--------------------------------------------------------------------------\n    |\n    | Next, you may define every authentication guard for your application.\n    | Of course, a great default configuration has been defined for you\n    | here which uses session storage and the Eloquent user provider.\n    |\n    | All authentication drivers have a user provider. This defines how the\n    | users are actually retrieved out of your database or other storage\n    | mechanisms used by this application to persist your user's data.\n    |\n    | Supported: \"session\", \"token\"\n    |\n    */\n\n    'guards' => [\n        'web' => [\n            'driver' => 'session',\n            'provider' => 'users',\n        ],\n\n        'api' => [\n            'driver' => 'token',\n            'provider' => 'users',\n            'hash' => false,\n        ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | User Providers\n    |--------------------------------------------------------------------------\n    |\n    | All authentication drivers have a user provider. This defines how the\n    | users are actually retrieved out of your database or other storage\n    | mechanisms used by this application to persist your user's data.\n    |\n    | If you have multiple user tables or models you may configure multiple\n    | sources which represent each model / table. These sources may then\n    | be assigned to any extra authentication guards you have defined.\n    |\n    | Supported: \"database\", \"eloquent\"\n    |\n    */\n\n    'providers' => [\n        'users' => [\n            'driver' => 'eloquent',\n            'model' => App\\Models\\User::class,\n        ],\n\n        // 'users' => [\n        //     'driver' => 'database',\n        //     'table' => 'users',\n        // ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Resetting Passwords\n    |--------------------------------------------------------------------------\n    |\n    | You may specify multiple password reset configurations if you have more\n    | than one user table or model in the application and you want to have\n    | separate password reset settings based on the specific user types.\n    |\n    | The expire time is the number of minutes that the reset token should be\n    | considered valid. This security feature keeps tokens short-lived so\n    | they have less time to be guessed. You may change this as needed.\n    |\n    */\n\n    'passwords' => [\n        'users' => [\n            'provider' => 'users',\n            'table' => 'password_reset_tokens',\n            'expire' => 60,\n            'throttle' => 60,\n        ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Password Confirmation Timeout\n    |--------------------------------------------------------------------------\n    |\n    | Here you may define the amount of seconds before a password confirmation\n    | times out and the user is prompted to re-enter their password via the\n    | confirmation screen. By default, the timeout lasts for three hours.\n    |\n    */\n\n    'password_timeout' => 10800,\n];\n","module":"base","path":"\\config\\auth.php"},"\\app\\Http\\Controllers\\Controller.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Routing\\Controller as BaseController;\nuse Illuminate\\Foundation\\Validation\\ValidatesRequests;\nuse Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests;\n\nclass Controller extends BaseController\n{\n    use AuthorizesRequests, ValidatesRequests;\n}\n","module":"base","path":"\\app\\Http\\Controllers\\Controller.php"},"\\lang\\en\\crud.php":{"deleteOnGeneration":true,"content":"<?php\n\nreturn [\n    'common' => [\n        'actions' => 'Actions',\n        'create' => 'Create',\n        'edit' => 'Edit',\n        'update' => 'Update',\n        'new' => 'New',\n        'cancel' => 'Cancel',\n        'attach' => 'Attach',\n        'detach' => 'Detach',\n        'save' => 'Save',\n        'delete' => 'Delete',\n        'delete_selected' => 'Delete selected',\n        'search' => 'Search...',\n        'back' => 'Back to Index',\n        'are_you_sure' => 'Are you sure?',\n        'no_items_found' => 'No items found',\n        'created' => 'Successfully created',\n        'saved' => 'Saved successfully',\n        'removed' => 'Successfully removed',\n    ],\n\n    'users' => [\n        'name' => 'Users',\n        'index_title' => 'Users List',\n        'new_title' => 'New User',\n        'create_title' => 'Create User',\n        'edit_title' => 'Edit User',\n        'show_title' => 'Show User',\n        'inputs' => [\n            'name' => 'Name',\n            'email' => 'Email',\n            'password' => 'Password',\n        ],\n    ],\n\n    'events' => [\n        'name' => 'Events',\n        'index_title' => 'Events List',\n        'new_title' => 'New Event',\n        'create_title' => 'Create Event',\n        'edit_title' => 'Edit Event',\n        'show_title' => 'Show Event',\n        'inputs' => [\n            'gallery_name' => 'Gallery Name',\n            'max_photos' => 'Max Photos',\n            'max_users' => 'Max Users',\n            'expiration_date' => 'Expiration Date',\n            'user_id' => 'User',\n        ],\n    ],\n\n    'photos' => [\n        'name' => 'Photos',\n        'index_title' => 'Photos List',\n        'new_title' => 'New Photo',\n        'create_title' => 'Create Photo',\n        'edit_title' => 'Edit Photo',\n        'show_title' => 'Show Photo',\n        'inputs' => [\n            'event_id' => 'Event',\n            'photo' => 'Photo',\n        ],\n    ],\n\n    'invitations' => [\n        'name' => 'Invitations',\n        'index_title' => 'Invitations List',\n        'new_title' => 'New Invitation',\n        'create_title' => 'Create Invitation',\n        'edit_title' => 'Edit Invitation',\n        'show_title' => 'Show Invitation',\n        'inputs' => [\n            'email' => 'Email',\n            'event_id' => 'Event',\n        ],\n    ],\n\n    'comments' => [\n        'name' => 'Comments',\n        'index_title' => 'Comments List',\n        'new_title' => 'New Comment',\n        'create_title' => 'Create Comment',\n        'edit_title' => 'Edit Comment',\n        'show_title' => 'Show Comment',\n        'inputs' => [\n            'photo_id' => 'Photo',\n            'comment' => 'Comment',\n        ],\n    ],\n\n    'roles' => [\n        'name' => 'Roles',\n        'index_title' => 'Roles List',\n        'create_title' => 'Create Role',\n        'edit_title' => 'Edit Role',\n        'show_title' => 'Show Role',\n        'inputs' => [\n            'name' => 'Name',\n        ],\n    ],\n\n    'permissions' => [\n        'name' => 'Permissions',\n        'index_title' => 'Permissions List',\n        'create_title' => 'Create Permission',\n        'edit_title' => 'Edit Permission',\n        'show_title' => 'Show Permission',\n        'inputs' => [\n            'name' => 'Name',\n        ],\n    ],\n];\n","module":"base","path":"\\lang\\en\\crud.php"},"\\routes\\api.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Route;\nuse App\\Http\\Controllers\\Api\\UserController;\nuse App\\Http\\Controllers\\Api\\AuthController;\nuse App\\Http\\Controllers\\Api\\RoleController;\nuse App\\Http\\Controllers\\Api\\EventController;\nuse App\\Http\\Controllers\\Api\\PhotoController;\nuse App\\Http\\Controllers\\Api\\CommentController;\nuse App\\Http\\Controllers\\Api\\UserEventsController;\nuse App\\Http\\Controllers\\Api\\InvitationController;\nuse App\\Http\\Controllers\\Api\\PermissionController;\nuse App\\Http\\Controllers\\Api\\EventPhotosController;\nuse App\\Http\\Controllers\\Api\\PhotoCommentsController;\nuse App\\Http\\Controllers\\Api\\EventInvitationsController;\n\n/*\n|--------------------------------------------------------------------------\n| API Routes\n|--------------------------------------------------------------------------\n|\n| Here is where you can register API routes for your application. These\n| routes are loaded by the RouteServiceProvider within a group which\n| is assigned the \"api\" middleware group. Enjoy building your API!\n|\n*/\n\nRoute::post('/login', [AuthController::class, 'login'])->name('api.login');\n\nRoute::middleware('auth:sanctum')\n    ->get('/user', function (Request $request) {\n        return $request->user();\n    })\n    ->name('api.user');\n\nRoute::name('api.')\n    ->middleware('auth:sanctum')\n    ->group(function () {\n        Route::apiResource('roles', RoleController::class);\n        Route::apiResource('permissions', PermissionController::class);\n\n        Route::apiResource('users', UserController::class);\n\n        // User Events\n        Route::get('/users/{user}/events', [\n            UserEventsController::class,\n            'index',\n        ])->name('users.events.index');\n        Route::post('/users/{user}/events', [\n            UserEventsController::class,\n            'store',\n        ])->name('users.events.store');\n\n        Route::apiResource('events', EventController::class);\n\n        // Event Photos\n        Route::get('/events/{event}/photos', [\n            EventPhotosController::class,\n            'index',\n        ])->name('events.photos.index');\n        Route::post('/events/{event}/photos', [\n            EventPhotosController::class,\n            'store',\n        ])->name('events.photos.store');\n\n        // Event Invitations\n        Route::get('/events/{event}/invitations', [\n            EventInvitationsController::class,\n            'index',\n        ])->name('events.invitations.index');\n        Route::post('/events/{event}/invitations', [\n            EventInvitationsController::class,\n            'store',\n        ])->name('events.invitations.store');\n\n        Route::apiResource('photos', PhotoController::class);\n\n        // Photo Comments\n        Route::get('/photos/{photo}/comments', [\n            PhotoCommentsController::class,\n            'index',\n        ])->name('photos.comments.index');\n        Route::post('/photos/{photo}/comments', [\n            PhotoCommentsController::class,\n            'store',\n        ])->name('photos.comments.store');\n\n        Route::apiResource('invitations', InvitationController::class);\n\n        Route::apiResource('comments', CommentController::class);\n    });\n","module":"base","path":"\\routes\\api.php"},"\\routes\\web.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Support\\Facades\\Route;\nuse App\\Http\\Controllers\\HomeController;\nuse App\\Http\\Controllers\\UserController;\nuse App\\Http\\Controllers\\RoleController;\nuse App\\Http\\Controllers\\EventController;\nuse App\\Http\\Controllers\\PhotoController;\nuse App\\Http\\Controllers\\CommentController;\nuse App\\Http\\Controllers\\InvitationController;\nuse App\\Http\\Controllers\\PermissionController;\n\n/*\n|--------------------------------------------------------------------------\n| Web Routes\n|--------------------------------------------------------------------------\n|\n| Here is where you can register web routes for your application. These\n| routes are loaded by the RouteServiceProvider within a group which\n| contains the \"web\" middleware group. Now create something great!\n|\n*/\n\nRoute::get('/', function () {\n    return view('welcome');\n});\n\nAuth::routes();\n\nRoute::get('/home', [HomeController::class, 'index'])->name('home');\n\nRoute::prefix('/')\n    ->middleware('auth')\n    ->group(function () {\n        Route::resource('roles', RoleController::class);\n        Route::resource('permissions', PermissionController::class);\n\n        Route::resource('users', UserController::class);\n        Route::resource('events', EventController::class);\n        Route::resource('photos', PhotoController::class);\n        Route::resource('invitations', InvitationController::class);\n        Route::resource('comments', CommentController::class);\n    });\n","module":"base","path":"\\routes\\web.php"},"\\resources\\views\\components\\form-button.blade.php":{"deleteOnGeneration":true,"content":"@props([\r\n    'method' => 'POST',\r\n    'action'\r\n])\r\n\r\n<x-form method=\"{{ $method }}\" action=\"{{ $action }}\">\r\n    <div>\r\n        <button type=\"submit\" {{ $attributes }}>\r\n            {{ $slot }}\r\n        </button>\r\n    </div>\r\n</x-form>","module":"base","path":"\\resources\\views\\components\\form-button.blade.php"},"\\resources\\views\\components\\form.blade.php":{"deleteOnGeneration":true,"content":"@props([\r\n    'method' => 'POST',\r\n    'action',\r\n    'hasFiles' => false,\r\n    'model'\r\n])\r\n\r\n@php\r\n    $method = strtoupper($method);\r\n@endphp\r\n\r\n<form method=\"{{ $method !== 'GET' ? 'POST' : $method }}\" action=\"{{ $action }}\" {!! $hasFiles ? 'enctype=\"multipart/form-data\"' : '' !!} {{ $attributes }}>\r\n    @csrf\r\n    @if (!in_array($method, ['POST', 'GET']))\r\n        @method($method)\r\n    @endif\r\n    {{ $slot }}\r\n</form>","module":"base","path":"\\resources\\views\\components\\form.blade.php"},"\\resources\\views\\components\\inputs\\basic.blade.php":{"deleteOnGeneration":true,"content":"@props([\r\n    'name',\r\n    'label',\r\n    'value',\r\n    'type' => 'text',\r\n    'min' => null,\r\n    'max' => null,\r\n    'step' => null,\r\n])\r\n\r\n@if($label ?? null)\r\n    @include('components.inputs.partials.label')\r\n@endif\r\n\r\n<input\r\n    type=\"{{ $type }}\"\r\n    id=\"{{ $name }}\"\r\n    name=\"{{ $name }}\"\r\n    value=\"{{ old($name, $value ?? '') }}\"\r\n    {{ ($required ?? false) ? 'required' : '' }}\r\n    {{ $attributes->merge(['class' => 'form-control']) }}\r\n    {{ $min ? \"min={$min}\" : '' }}\r\n    {{ $max ? \"max={$max}\" : '' }}\r\n    {{ $step ? \"step={$step}\" : '' }}\r\n    autocomplete=\"off\"\r\n>\r\n\r\n@error($name)\r\n    @include('components.inputs.partials.error')\r\n@enderror","module":"base","path":"\\resources\\views\\components\\inputs\\basic.blade.php"},"\\resources\\views\\components\\inputs\\checkbox.blade.php":{"deleteOnGeneration":true,"content":"@props([\r\n    'id',\r\n    'name',\r\n    'label',\r\n    'value',\r\n    'checked' => false,\r\n    'addHiddenValue' => true,\r\n    'hiddenValue' => 0,\r\n])\r\n\r\n@php\r\n    $checked = !! $checked\r\n@endphp\r\n\r\n<div class=\"form-check\">\r\n\r\n    {{-- Adds a hidden default value to be send if checked is false --}}\r\n    @if($addHiddenValue)\r\n    <input type=\"hidden\" id=\"{{  $id ?? $name }}-hidden\" name=\"{{ $name }}\" value=\"{{ $hiddenValue }}\">\r\n    @endif\r\n\r\n    <input\r\n        type=\"checkbox\"\r\n        id=\"{{ $id ?? $name }}\"\r\n        name=\"{{ $name }}\"\r\n        value=\"{{ $value ?? 1 }}\"\r\n        {{ $checked ? 'checked' : '' }}\r\n        {{ $attributes->merge(['class' => 'form-check-input']) }}\r\n    >\r\n\r\n    @if($label ?? null)\r\n        <label class=\"form-check-label\" for=\"{{ $id ?? $name }}\">\r\n            {{ $label }}\r\n        </label>\r\n    @endif\r\n</div>\r\n\r\n@error($name)\r\n    @include('components.inputs.partials.error')\r\n@enderror","module":"base","path":"\\resources\\views\\components\\inputs\\checkbox.blade.php"},"\\resources\\views\\components\\inputs\\date.blade.php":{"deleteOnGeneration":true,"content":"@props([\r\n    'name',\r\n    'label',\r\n    'value',\r\n])\r\n\r\n<x-inputs.basic type=\"date\" :name=\"$name\" label=\"{{ $label ?? ''}}\" :value=\"$value ?? ''\" :attributes=\"$attributes\"></x-inputs.basic>","module":"base","path":"\\resources\\views\\components\\inputs\\date.blade.php"},"\\resources\\views\\components\\inputs\\datetime.blade.php":{"deleteOnGeneration":true,"content":"@props([\r\n    'name',\r\n    'label',\r\n    'value',\r\n])\r\n\r\n<x-inputs.basic type=\"datetime-local\" :name=\"$name\" label=\"{{ $label ?? ''}}\" :value=\"$value ?? ''\" :attributes=\"$attributes\"></x-inputs.basic>","module":"base","path":"\\resources\\views\\components\\inputs\\datetime.blade.php"},"\\resources\\views\\components\\inputs\\email.blade.php":{"deleteOnGeneration":true,"content":"@props([\r\n    'name',\r\n    'label',\r\n    'value',\r\n])\r\n\r\n<x-inputs.basic type=\"email\" :name=\"$name\" label=\"{{ $label ?? ''}}\" :value=\"$value ?? ''\" :attributes=\"$attributes\"></x-inputs.basic>","module":"base","path":"\\resources\\views\\components\\inputs\\email.blade.php"},"\\resources\\views\\components\\inputs\\group.blade.php":{"deleteOnGeneration":true,"content":"<div {{ $attributes->merge(['class' => 'form-group']) }}>\r\n    {{ $slot }}\r\n</div>","module":"base","path":"\\resources\\views\\components\\inputs\\group.blade.php"},"\\resources\\views\\components\\inputs\\hidden.blade.php":{"deleteOnGeneration":true,"content":"@props([\r\n    'name',\r\n    'value',\r\n])\r\n\r\n<x-inputs.basic type=\"hidden\" :name=\"$name\" :value=\"$value ?? ''\" :attributes=\"$attributes\"></x-inputs.basic>","module":"base","path":"\\resources\\views\\components\\inputs\\hidden.blade.php"},"\\resources\\views\\components\\inputs\\number.blade.php":{"deleteOnGeneration":true,"content":"@props([\r\n    'name',\r\n    'label',\r\n    'value',\r\n    'min' => null,\r\n    'max' => null,\r\n    'step' => null,\r\n])\r\n\r\n<x-inputs.basic type=\"number\" :name=\"$name\" label=\"{{ $label ?? ''}}\" :value=\"$value ?? ''\" :attributes=\"$attributes\" :min=\"$min\" :max=\"$max\" :step=\"$step\"></x-inputs.basic>","module":"base","path":"\\resources\\views\\components\\inputs\\number.blade.php"},"\\resources\\views\\components\\inputs\\partials\\error.blade.php":{"deleteOnGeneration":true,"content":"<p class=\"text-danger\" role=\"alert\">{{ $message }}</p>","module":"base","path":"\\resources\\views\\components\\inputs\\partials\\error.blade.php"},"\\resources\\views\\components\\inputs\\partials\\label.blade.php":{"deleteOnGeneration":true,"content":"<label class=\"{{ ($required ?? false) ? 'label label-required ' : 'label ' }}\" for=\"{{ $name }}\">\r\n    {{ $label }}\r\n</label>","module":"base","path":"\\resources\\views\\components\\inputs\\partials\\label.blade.php"},"\\resources\\views\\components\\inputs\\password.blade.php":{"deleteOnGeneration":true,"content":"@props([\r\n    'name',\r\n    'label',\r\n    'value' => '',\r\n])\r\n\r\n<x-inputs.basic type=\"password\" :name=\"$name\" label=\"{{ $label ?? ''}}\" :value=\"$value ?? ''\" :attributes=\"$attributes\"></x-inputs.basic>","module":"base","path":"\\resources\\views\\components\\inputs\\password.blade.php"},"\\resources\\views\\components\\inputs\\select.blade.php":{"deleteOnGeneration":true,"content":"@props([\r\n    'name',\r\n    'label',\r\n    'type' => 'text',\r\n])\r\n\r\n@if($label ?? null)\r\n    @include('components.inputs.partials.label')\r\n@endif\r\n\r\n<select\r\n    id=\"{{ $name }}\"\r\n    name=\"{{ $name }}\"\r\n    {{ ($required ?? false) ? 'required' : '' }}\r\n    {{ $attributes->merge(['class' => 'form-control']) }}\r\n    autocomplete=\"off\"\r\n>{{ $slot }}</select>\r\n\r\n@error($name)\r\n    @include('components.inputs.partials.error')\r\n@enderror","module":"base","path":"\\resources\\views\\components\\inputs\\select.blade.php"},"\\resources\\views\\components\\inputs\\text.blade.php":{"deleteOnGeneration":true,"content":"@props([\r\n    'name',\r\n    'label',\r\n    'value',\r\n])\r\n\r\n<x-inputs.basic type=\"text\" :name=\"$name\" label=\"{{ $label ?? ''}}\" :value=\"$value ?? ''\" :attributes=\"$attributes\"></x-inputs.basic>","module":"base","path":"\\resources\\views\\components\\inputs\\text.blade.php"},"\\resources\\views\\components\\inputs\\textarea.blade.php":{"deleteOnGeneration":true,"content":"@props([\r\n    'name',\r\n    'label',\r\n])\r\n\r\n@if($label ?? null)\r\n    @include('components.inputs.partials.label')\r\n@endif\r\n\r\n<textarea \r\n    id=\"{{ $name }}\"\r\n    name=\"{{ $name }}\" \r\n    rows=\"3\"\r\n    {{ ($required ?? false) ? 'required' : '' }}\r\n    {{ $attributes->merge(['class' => 'form-control']) }}\r\n    autocomplete=\"off\"\r\n>{{$slot}}</textarea>\r\n\r\n@error($name)\r\n    @include('components.inputs.partials.error')\r\n@enderror","module":"base","path":"\\resources\\views\\components\\inputs\\textarea.blade.php"},"\\resources\\views\\components\\inputs\\url.blade.php":{"deleteOnGeneration":true,"content":"@props([\r\n    'name',\r\n    'label',\r\n    'value',\r\n])\r\n\r\n<x-inputs.basic type=\"url\" :name=\"$name\" label=\"{{ $label ?? ''}}\" :value=\"$value ?? ''\" :attributes=\"$attributes\"></x-inputs.basic>","module":"base","path":"\\resources\\views\\components\\inputs\\url.blade.php"},"\\resources\\views\\components\\modal.blade.php":{"deleteOnGeneration":true,"content":"{{-- \r\n    This modal was copied from Jetstrap components,\r\n    an awesome package for adapting Jetstrem for Bootstrap:\r\n\r\n    https://github.com/nascent-africa/jetstrap\r\n--}}\r\n\r\n@props(['id', 'maxWidth', 'modal' => false])\r\n\r\n@php\r\n$id = $id ?? md5($attributes->wire('model'));\r\nswitch ($maxWidth ?? '') {\r\n    case 'sm':\r\n        $maxWidth = ' modal-sm';\r\n        break;\r\n    case 'md':\r\n        $maxWidth = '';\r\n        break;\r\n    case 'lg':\r\n        $maxWidth = ' modal-lg';\r\n        break;\r\n    case 'xl':\r\n        $maxWidth = ' modal-xl';\r\n        break;\r\n    case '2xl':\r\n    default:\r\n        $maxWidth = '';\r\n        break;\r\n}\r\n@endphp\r\n\r\n<!-- Modal -->\r\n<div \r\n    x-data=\"{\r\n        show: @entangle($attributes->wire('model')).defer,\r\n    }\"\r\n    x-init=\"() => {\r\n        let modal = $('#{{ $id }}');\r\n        $watch('show', value => {\r\n            if (value) {\r\n                modal.modal('show')\r\n            } else {\r\n                modal.modal('hide')\r\n            }\r\n        });\r\n        modal.on('hide.bs.modal', function () {\r\n            show = false\r\n        })\r\n    }\"\r\n    wire:ignore.self \r\n    class=\"modal fade\" \r\n    tabindex=\"-1\" \r\n    id=\"{{ $id }}\" \r\n    aria-labelledby=\"{{ $id }}\" \r\n    aria-hidden=\"true\"\r\n    x-ref=\"{{ $id }}\"\r\n>\r\n    <div class=\"modal-dialog{{ $maxWidth }}\">\r\n        {{ $slot }}\r\n    </div>\r\n</div>","module":"base","path":"\\resources\\views\\components\\modal.blade.php"},"\\resources\\views\\components\\partials\\thumbnail.blade.php":{"deleteOnGeneration":true,"content":"@props([\r\n    'src',\r\n    'size' => 50,\r\n])\r\n\r\n@if($src)\r\n<img src=\"{{ $src }}\" class=\"border rounded\" style=\"width: {{ $size }}px; height: {{ $size }}px; object-fit: cover;\">\r\n@else\r\n<div class=\"border rounded bg-light\" style=\"width: {{ $size }}px; height: {{ $size }}px;\"></div>\r\n@endif","module":"base","path":"\\resources\\views\\components\\partials\\thumbnail.blade.php"},"\\resources\\views\\layouts\\app.blade.php":{"deleteOnGeneration":true,"content":"<!doctype html>\n<html lang=\"{{ str_replace('_', '-', app()->getLocale()) }}\">\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        \n        <!-- CSRF Token -->\n        <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n        \n        <title>Event Photo Sharing</title>\n        \n        <!-- Scripts -->\n        <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\" integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin=\"anonymous\"></script>\n        <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\" integrity=\"sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN\" crossorigin=\"anonymous\"></script>\n        <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.min.js\" integrity=\"sha384-+YQ4JLhjyBLPDQt//I+STsc9iw4uQqACwlvpslubQzn4u2UU2UFM80nGisd026JF\" crossorigin=\"anonymous\"></script>\n        <script src=\"https://cdn.jsdelivr.net/npm/admin-lte@3.1/dist/js/adminlte.min.js\"></script>\n        <script src=\"https://unpkg.com/alpinejs@3.10.2/dist/cdn.min.js\" defer></script>\n        \n        <!-- Fonts -->\n        <link rel=\"dns-prefetch\" href=\"//fonts.gstatic.com\">\n        <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&amp;display=fallback\">\n        {{-- <link href=\"https://fonts.googleapis.com/css?family=Nunito\" rel=\"stylesheet\"> --}}\n        \n        <!-- Styles -->\n        {{-- <link href=\"{{ asset('css/app.css') }}\" rel=\"stylesheet\"> --}}\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/admin-lte@3.1/dist/css/adminlte.min.css\">\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.css\">\n        \n        <!-- Icons -->\n        <link href=\"https://unpkg.com/ionicons@4.5.10-0/dist/css/ionicons.min.css\" rel=\"stylesheet\">\n        \n        <!-- Small Ionicons Fixes for AdminLTE -->\n        <style>\n        html {\n            background-color: #f4f6f9;\n        }\n        \n        .nav-icon.icon:before {\n            width: 25px;\n        }\n        </style>\n\r\n        \r\n        <script type=\"module\">\r\n            import hotwiredTurbo from 'https://cdn.skypack.dev/@hotwired/turbo';\r\n        </script>\r\n        \r\n        @livewireStyles\n    </head>\n    \n    <body class=\"sidebar-mini layout-fixed layout-navbar-fixed \">\n        <div id=\"app\" class=\"wrapper\">\n            <div class=\"main-header\">\n                @include('layouts.nav')\n            </div>\n        \n            @include('layouts.sidebar')\n        \n            <main class=\"content-wrapper p-5\">\n                @yield('content')\n            </main>\n        </div>\n\n        @stack('modals')\r\n        \r\n        @livewireScripts\r\n        \r\n        <script src=\"https://cdn.jsdelivr.net/gh/livewire/turbolinks@v0.1.x/dist/livewire-turbolinks.js\" data-turbolinks-eval=\"false\" data-turbo-eval=\"false\"></script>\r\n        \r\n        @stack('scripts')\r\n        \r\n        <script src=\"https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.js\"></script>\r\n        \r\n        @if (session()->has('success')) \r\n        <script>\r\n            var notyf = new Notyf({dismissible: true})\r\n            notyf.success('{{ session('success') }}')\r\n        </script> \r\n        @endif\n\n        <script>\r\n            /* Simple Alpine Image Viewer */\r\n            document.addEventListener('alpine:init', () => {\r\n                Alpine.data('imageViewer', (src = '') => {\r\n                    return {\r\n                        imageUrl: src,\r\n        \r\n                        refreshUrl() {\r\n                            this.imageUrl = this.$el.getAttribute(\"image-url\")\r\n                        },\r\n        \r\n                        fileChosen(event) {\r\n                            this.fileToDataUrl(event, src => this.imageUrl = src)\r\n                        },\r\n        \r\n                        fileToDataUrl(event, callback) {\r\n                            if (! event.target.files.length) return\r\n        \r\n                            let file = event.target.files[0],\r\n                                reader = new FileReader()\r\n        \r\n                            reader.readAsDataURL(file)\r\n                            reader.onload = e => callback(e.target.result)\r\n                        },\r\n                    }\r\n                })\r\n            })\r\n        </script>\n    </body>\n</html>","module":"base","path":"\\resources\\views\\layouts\\app.blade.php"},"\\resources\\views\\layouts\\nav.blade.php":{"deleteOnGeneration":true,"content":"<nav class=\"navbar navbar-expand navbar-light navbar-white\">\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"{{ __('Toggle navigation') }}\">\n        <span class=\"navbar-toggler-icon\"></span>\n    </button>\n\n    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n        <!-- Left Side Of Navbar -->\n        <ul class=\"navbar-nav mr-auto\">\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" data-widget=\"pushmenu\" href=\"#\" role=\"button\">\n                    <i class=\"icon ion-md-menu\"></i>\n                </a>\n            </li>\n        </ul>\n\n        <!-- Right Side Of Navbar -->\n        <ul class=\"navbar-nav ml-auto\">\n            <!-- Authentication Links -->\n            @guest\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{{ route('login') }}\">{{ __('Login') }}</a>\n                </li>\n                @if (Route::has('register'))\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"{{ route('register') }}\">{{ __('Register') }}</a>\n                    </li>\n                @endif\n            @endguest\n        </ul>\n    </div>\n</nav>\n","module":"base","path":"\\resources\\views\\layouts\\nav.blade.php"},"\\database\\factories\\CommentFactory.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\Comment;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass CommentFactory extends Factory\n{\n    /**\n     * The name of the factory's corresponding model.\n     *\n     * @var string\n     */\n    protected $model = Comment::class;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array<string, mixed>\n     */\n    public function definition(): array\n    {\n        return [\n            'comment' => $this->faker->text(),\n            'photo_id' => \\App\\Models\\Photo::factory(),\n        ];\n    }\n}\n","module":"entity:16","path":"\\database\\factories\\CommentFactory.php"},"\\database\\factories\\EventFactory.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\Event;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass EventFactory extends Factory\n{\n    /**\n     * The name of the factory's corresponding model.\n     *\n     * @var string\n     */\n    protected $model = Event::class;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array<string, mixed>\n     */\n    public function definition(): array\n    {\n        return [\n            'gallery_name' => $this->faker->text(15),\n            'max_photos' => $this->faker->randomNumber(),\n            'max_users' => $this->faker->randomNumber(),\n            'expiration_date' => $this->faker->date(),\n            'user_id' => \\App\\Models\\User::factory(),\n        ];\n    }\n}\n","module":"entity:14","path":"\\database\\factories\\EventFactory.php"},"\\database\\factories\\InvitationFactory.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\Invitation;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass InvitationFactory extends Factory\n{\n    /**\n     * The name of the factory's corresponding model.\n     *\n     * @var string\n     */\n    protected $model = Invitation::class;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array<string, mixed>\n     */\n    public function definition(): array\n    {\n        return [\n            'email' => $this->faker->email(),\n            'event_id' => \\App\\Models\\Event::factory(),\n        ];\n    }\n}\n","module":"entity:17","path":"\\database\\factories\\InvitationFactory.php"},"\\database\\factories\\PhotoFactory.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\Photo;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass PhotoFactory extends Factory\n{\n    /**\n     * The name of the factory's corresponding model.\n     *\n     * @var string\n     */\n    protected $model = Photo::class;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array<string, mixed>\n     */\n    public function definition(): array\n    {\n        return [\n            'photo' => $this->faker->text(10),\n            'event_id' => \\App\\Models\\Event::factory(),\n        ];\n    }\n}\n","module":"entity:15","path":"\\database\\factories\\PhotoFactory.php"},"\\database\\factories\\UserFactory.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\User;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass UserFactory extends Factory\n{\n    /**\n     * The name of the factory's corresponding model.\n     *\n     * @var string\n     */\n    protected $model = User::class;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array<string, mixed>\n     */\n    public function definition(): array\n    {\n        return [\n            'name' => $this->faker->name(),\n            'email' => $this->faker->unique->email(),\n            'email_verified_at' => now(),\n            'password' => \\Hash::make('password'),\n            'remember_token' => Str::random(10),\n        ];\n    }\n\n    /**\n     * Indicate that the model's email address should be unverified.\n     */\n    public function unverified(): Factory\n    {\n        return $this->state(function (array $attributes) {\n            return [\n                'email_verified_at' => null,\n            ];\n        });\n    }\n}\n","module":"entity:13","path":"\\database\\factories\\UserFactory.php"},"\\database\\seeders\\CommentSeeder.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Seeders;\n\nuse App\\Models\\Comment;\nuse Illuminate\\Database\\Seeder;\n\nclass CommentSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     */\n    public function run(): void\n    {\n        Comment::factory()\n            ->count(5)\n            ->create();\n    }\n}\n","module":"entity:16","path":"\\database\\seeders\\CommentSeeder.php"},"\\database\\seeders\\EventSeeder.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Seeders;\n\nuse App\\Models\\Event;\nuse Illuminate\\Database\\Seeder;\n\nclass EventSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     */\n    public function run(): void\n    {\n        Event::factory()\n            ->count(5)\n            ->create();\n    }\n}\n","module":"entity:14","path":"\\database\\seeders\\EventSeeder.php"},"\\database\\seeders\\InvitationSeeder.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Seeders;\n\nuse App\\Models\\Invitation;\nuse Illuminate\\Database\\Seeder;\n\nclass InvitationSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     */\n    public function run(): void\n    {\n        Invitation::factory()\n            ->count(5)\n            ->create();\n    }\n}\n","module":"entity:17","path":"\\database\\seeders\\InvitationSeeder.php"},"\\database\\seeders\\PhotoSeeder.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Seeders;\n\nuse App\\Models\\Photo;\nuse Illuminate\\Database\\Seeder;\n\nclass PhotoSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     */\n    public function run(): void\n    {\n        Photo::factory()\n            ->count(5)\n            ->create();\n    }\n}\n","module":"entity:15","path":"\\database\\seeders\\PhotoSeeder.php"},"\\database\\seeders\\UserSeeder.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Seeders;\n\nuse App\\Models\\User;\nuse Illuminate\\Database\\Seeder;\n\nclass UserSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     */\n    public function run(): void\n    {\n        User::factory()\n            ->count(5)\n            ->create();\n    }\n}\n","module":"entity:13","path":"\\database\\seeders\\UserSeeder.php"},"\\database\\seeders\\DatabaseSeeder.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Seeders;\n\nuse Illuminate\\Database\\Seeder;\n\nclass DatabaseSeeder extends Seeder\n{\n    /**\n     * Seed the application's database.\n     */\n    public function run(): void\n    {\n        // Adding an admin user\n        $user = \\App\\Models\\User::factory()\n            ->count(1)\n            ->create([\n                'email' => 'admin@admin.com',\n                'password' => \\Hash::make('admin'),\n            ]);\n        $this->call(PermissionsSeeder::class);\n\n        $this->call(CommentSeeder::class);\n        $this->call(EventSeeder::class);\n        $this->call(InvitationSeeder::class);\n        $this->call(PhotoSeeder::class);\n        $this->call(UserSeeder::class);\n    }\n}\n","module":"base","path":"\\database\\seeders\\DatabaseSeeder.php"},"\\database\\migrations\\2023_06_26_000001_create_comments_table.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nreturn new class extends Migration {\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('comments', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->unsignedBigInteger('photo_id');\n            $table->text('comment');\n\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::dropIfExists('comments');\n    }\n};\n","module":"entity:16","path":"\\database\\migrations\\2023_06_26_000001_create_comments_table.php"},"\\database\\migrations\\2023_06_26_000002_create_events_table.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nreturn new class extends Migration {\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('events', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->string('gallery_name');\n            $table->integer('max_photos')->nullable();\n            $table->integer('max_users');\n            $table->date('expiration_date')->nullable();\n            $table->unsignedBigInteger('user_id');\n\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::dropIfExists('events');\n    }\n};\n","module":"entity:14","path":"\\database\\migrations\\2023_06_26_000002_create_events_table.php"},"\\database\\migrations\\2023_06_26_000003_create_invitations_table.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nreturn new class extends Migration {\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('invitations', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->string('email');\n            $table->unsignedBigInteger('event_id');\n\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::dropIfExists('invitations');\n    }\n};\n","module":"entity:17","path":"\\database\\migrations\\2023_06_26_000003_create_invitations_table.php"},"\\database\\migrations\\2023_06_26_000004_create_photos_table.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nreturn new class extends Migration {\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('photos', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->unsignedBigInteger('event_id');\n            $table->string('photo');\n\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::dropIfExists('photos');\n    }\n};\n","module":"entity:15","path":"\\database\\migrations\\2023_06_26_000004_create_photos_table.php"},"\\database\\migrations\\2014_10_12_000000_create_users_table.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nreturn new class extends Migration {\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->string('name');\n            $table->string('email')->unique();\n            $table->timestamp('email_verified_at')->nullable();\n            $table->string('password');\n            $table->string('remember_token', 100)->nullable();\n\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::dropIfExists('users');\n    }\n};\n","module":"entity:13","path":"\\database\\migrations\\2014_10_12_000000_create_users_table.php"},"\\database\\migrations\\2023_06_26_009001_add_foreigns_to_comments_table.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nreturn new class extends Migration {\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::table('comments', function (Blueprint $table) {\n            $table\n                ->foreign('photo_id')\n                ->references('id')\n                ->on('photos')\n                ->onUpdate('CASCADE')\n                ->onDelete('CASCADE');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::table('comments', function (Blueprint $table) {\n            $table->dropForeign(['photo_id']);\n        });\n    }\n};\n","module":"entity:16|entity:15","path":"\\database\\migrations\\2023_06_26_009001_add_foreigns_to_comments_table.php"},"\\database\\migrations\\2023_06_26_009002_add_foreigns_to_events_table.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nreturn new class extends Migration {\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::table('events', function (Blueprint $table) {\n            $table\n                ->foreign('user_id')\n                ->references('id')\n                ->on('users')\n                ->onUpdate('CASCADE')\n                ->onDelete('CASCADE');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::table('events', function (Blueprint $table) {\n            $table->dropForeign(['user_id']);\n        });\n    }\n};\n","module":"entity:14|entity:13","path":"\\database\\migrations\\2023_06_26_009002_add_foreigns_to_events_table.php"},"\\database\\migrations\\2023_06_26_009003_add_foreigns_to_invitations_table.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nreturn new class extends Migration {\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::table('invitations', function (Blueprint $table) {\n            $table\n                ->foreign('event_id')\n                ->references('id')\n                ->on('events')\n                ->onUpdate('CASCADE')\n                ->onDelete('CASCADE');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::table('invitations', function (Blueprint $table) {\n            $table->dropForeign(['event_id']);\n        });\n    }\n};\n","module":"entity:17|entity:14","path":"\\database\\migrations\\2023_06_26_009003_add_foreigns_to_invitations_table.php"},"\\database\\migrations\\2023_06_26_009004_add_foreigns_to_photos_table.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nreturn new class extends Migration {\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::table('photos', function (Blueprint $table) {\n            $table\n                ->foreign('event_id')\n                ->references('id')\n                ->on('events')\n                ->onUpdate('CASCADE')\n                ->onDelete('CASCADE');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::table('photos', function (Blueprint $table) {\n            $table->dropForeign(['event_id']);\n        });\n    }\n};\n","module":"entity:15|entity:14","path":"\\database\\migrations\\2023_06_26_009004_add_foreigns_to_photos_table.php"},"\\app\\Models\\Comment.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Models;\n\nuse App\\Models\\Scopes\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n\nclass Comment extends Model\n{\n    use HasFactory;\n    use Searchable;\n\n    protected $fillable = ['photo_id', 'comment'];\n\n    protected $searchableFields = ['*'];\n\n    public function photo()\n    {\n        return $this->belongsTo(Photo::class);\n    }\n}\n","module":"entity:16","path":"\\app\\Models\\Comment.php"},"\\app\\Models\\Event.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Models;\n\nuse App\\Models\\Scopes\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n\nclass Event extends Model\n{\n    use HasFactory;\n    use Searchable;\n\n    protected $fillable = [\n        'gallery_name',\n        'max_photos',\n        'max_users',\n        'expiration_date',\n        'user_id',\n    ];\n\n    protected $searchableFields = ['*'];\n\n    protected $casts = [\n        'expiration_date' => 'date',\n    ];\n\n    public function photos()\n    {\n        return $this->hasMany(Photo::class);\n    }\n\n    public function user()\n    {\n        return $this->belongsTo(User::class);\n    }\n\n    public function invitations()\n    {\n        return $this->hasMany(Invitation::class);\n    }\n}\n","module":"entity:14","path":"\\app\\Models\\Event.php"},"\\app\\Models\\Invitation.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Models;\n\nuse App\\Models\\Scopes\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n\nclass Invitation extends Model\n{\n    use HasFactory;\n    use Searchable;\n\n    protected $fillable = ['email', 'event_id'];\n\n    protected $searchableFields = ['*'];\n\n    public function event()\n    {\n        return $this->belongsTo(Event::class);\n    }\n}\n","module":"entity:17","path":"\\app\\Models\\Invitation.php"},"\\app\\Models\\Photo.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Models;\n\nuse App\\Models\\Scopes\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n\nclass Photo extends Model\n{\n    use HasFactory;\n    use Searchable;\n\n    protected $fillable = ['event_id', 'photo'];\n\n    protected $searchableFields = ['*'];\n\n    public function event()\n    {\n        return $this->belongsTo(Event::class);\n    }\n\n    public function comments()\n    {\n        return $this->hasMany(Comment::class);\n    }\n}\n","module":"entity:15","path":"\\app\\Models\\Photo.php"},"\\app\\Models\\User.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Models;\n\nuse Laravel\\Sanctum\\HasApiTokens;\nuse App\\Models\\Scopes\\Searchable;\nuse Spatie\\Permission\\Traits\\HasRoles;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Contracts\\Auth\\MustVerifyEmail;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\nclass User extends Authenticatable\n{\n    use HasRoles;\n    use Notifiable;\n    use HasFactory;\n    use Searchable;\n    use HasApiTokens;\n\n    protected $fillable = ['name', 'email', 'password'];\n\n    protected $searchableFields = ['*'];\n\n    protected $hidden = ['password', 'remember_token'];\n\n    protected $casts = [\n        'email_verified_at' => 'datetime',\n    ];\n\n    public function events()\n    {\n        return $this->hasMany(Event::class);\n    }\n\n    public function isSuperAdmin(): bool\n    {\n        return $this->hasRole('super-admin');\n    }\n}\n","module":"entity:13","path":"\\app\\Models\\User.php"},"\\app\\Models\\Scopes\\Searchable.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Models\\Scopes;\n\nuse Illuminate\\Database\\Eloquent\\Builder;\n\ntrait Searchable\n{\n    /**\n     * Search paginated items ordering by ID descending\n     */\n    public function scopeSearchLatestPaginated(\n        Builder $query,\n        string $search,\n        int $paginationQuantity = 10\n    ): Builder {\n        return $query\n            ->search($search)\n            ->orderBy('updated_at', 'desc')\n            ->paginate($paginationQuantity);\n    }\n\n    /**\n     * Adds a scope to search the table based on the\n     * $searchableFields array inside the model\n     */\n    public function scopeSearch(Builder $query, string $search): Builder\n    {\n        $query->where(function ($query) use ($search) {\n            foreach ($this->getSearchableFields() as $field) {\n                $query->orWhere($field, 'like', \"%{$search}%\");\n            }\n        });\n\n        return $query;\n    }\n\n    /**\n     * Returns the searchable fields. If $searchableFields is undefined,\n     * or is an empty array, or its first element is '*', it will search\n     * in all table fields\n     */\n    protected function getSearchableFields(): array\n    {\n        if (isset($this->searchableFields) && count($this->searchableFields)) {\n            return $this->searchableFields[0] === '*'\n                ? $this->getAllModelTableFields()\n                : $this->searchableFields;\n        }\n\n        return $this->getAllModelTableFields();\n    }\n\n    /**\n     * Gets all fields from Model's table\n     */\n    protected function getAllModelTableFields(): array\n    {\n        $tableName = $this->getTable();\n\n        return $this->getConnection()\n            ->getSchemaBuilder()\n            ->getColumnListing($tableName);\n    }\n}\n","module":"base","path":"\\app\\Models\\Scopes\\Searchable.php"},"\\app\\Http\\Controllers\\Api\\AuthController.php":{"deleteOnGeneration":true,"content":"<?php\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\User;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\JsonResponse;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Validation\\ValidationException;\n\nclass AuthController extends Controller\n{\n    public function login(Request $request): JsonResponse\n    {\n        $credentials = $request->validate([\n            'email' => 'required|email',\n            'password' => 'required',\n        ]);\n\n        if (!auth()->attempt($credentials)) {\n            throw ValidationException::withMessages([\n                'email' => [trans('auth.failed')],\n            ]);\n        }\n\n        $user = User::whereEmail($request->email)->firstOrFail();\n\n        $token = $user->createToken('auth-token');\n\n        return response()->json([\n            'token' => $token->plainTextToken,\n        ]);\n    }\n}\n","module":"base","path":"\\app\\Http\\Controllers\\Api\\AuthController.php"},"\\database\\seeders\\PermissionsSeeder.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Seeders;\n\nuse Illuminate\\Database\\Seeder;\nuse Spatie\\Permission\\Models\\Role;\nuse Spatie\\Permission\\Models\\Permission;\nuse Spatie\\Permission\\PermissionRegistrar;\n\nclass PermissionsSeeder extends Seeder\n{\n    public function run(): void\n    {\n        // Reset cached roles and permissions\n        app()[PermissionRegistrar::class]->forgetCachedPermissions();\n\n        // Create default permissions\n        Permission::create(['name' => 'list comments']);\n        Permission::create(['name' => 'view comments']);\n        Permission::create(['name' => 'create comments']);\n        Permission::create(['name' => 'update comments']);\n        Permission::create(['name' => 'delete comments']);\n\n        Permission::create(['name' => 'list events']);\n        Permission::create(['name' => 'view events']);\n        Permission::create(['name' => 'create events']);\n        Permission::create(['name' => 'update events']);\n        Permission::create(['name' => 'delete events']);\n\n        Permission::create(['name' => 'list invitations']);\n        Permission::create(['name' => 'view invitations']);\n        Permission::create(['name' => 'create invitations']);\n        Permission::create(['name' => 'update invitations']);\n        Permission::create(['name' => 'delete invitations']);\n\n        Permission::create(['name' => 'list photos']);\n        Permission::create(['name' => 'view photos']);\n        Permission::create(['name' => 'create photos']);\n        Permission::create(['name' => 'update photos']);\n        Permission::create(['name' => 'delete photos']);\n\n        // Create user role and assign existing permissions\n        $currentPermissions = Permission::all();\n        $userRole = Role::create(['name' => 'user']);\n        $userRole->givePermissionTo($currentPermissions);\n\n        // Create admin exclusive permissions\n        Permission::create(['name' => 'list roles']);\n        Permission::create(['name' => 'view roles']);\n        Permission::create(['name' => 'create roles']);\n        Permission::create(['name' => 'update roles']);\n        Permission::create(['name' => 'delete roles']);\n\n        Permission::create(['name' => 'list permissions']);\n        Permission::create(['name' => 'view permissions']);\n        Permission::create(['name' => 'create permissions']);\n        Permission::create(['name' => 'update permissions']);\n        Permission::create(['name' => 'delete permissions']);\n\n        Permission::create(['name' => 'list users']);\n        Permission::create(['name' => 'view users']);\n        Permission::create(['name' => 'create users']);\n        Permission::create(['name' => 'update users']);\n        Permission::create(['name' => 'delete users']);\n\n        // Create admin role and assign all permissions\n        $allPermissions = Permission::all();\n        $adminRole = Role::create(['name' => 'super-admin']);\n        $adminRole->givePermissionTo($allPermissions);\n\n        $user = \\App\\Models\\User::whereEmail('admin@admin.com')->first();\n\n        if ($user) {\n            $user->assignRole($adminRole);\n        }\n    }\n}\n","module":"permissions","path":"\\database\\seeders\\PermissionsSeeder.php"},"\\app\\Http\\Controllers\\RoleController.php":{"deleteOnGeneration":true,"content":"<?php\r\n\r\nnamespace App\\Http\\Controllers;\r\n\r\nuse Illuminate\\View\\View;\r\nuse Illuminate\\Http\\Request;\r\nuse Spatie\\Permission\\Models\\Role;\r\nuse Illuminate\\Http\\RedirectResponse;\r\nuse Spatie\\Permission\\Models\\Permission;\r\n\r\nclass RoleController extends Controller {\r\n\r\n    /**\r\n     * Display a listing of the resource.\r\n     */\r\n    public function index(Request $request): View\r\n    {\r\n        $this->authorize('list', Role::class);\r\n\r\n        $search = $request->get('search', '');\r\n        $roles = Role::where('name', 'like', \"%{$search}%\")->paginate(10);\r\n\r\n        return view('app.roles.index')\r\n            ->with('roles', $roles)\r\n            ->with('search', $search);\r\n    }\r\n\r\n    /**\r\n     * Show the form for creating a new resource.\r\n     */\r\n    public function create(): View\r\n    {\r\n        $this->authorize('create', Role::class);\r\n\r\n        $permissions = Permission::all();\r\n\r\n        return view('app.roles.create')->with('permissions', $permissions);\r\n    }\r\n\r\n    /**\r\n     * Store a newly created resource in storage.\r\n     */\r\n    public function store(Request $request): RedirectResponse\r\n    {\r\n\r\n        $this->authorize('create', Role::class);\r\n\r\n        $data = $this->validate($request, [\r\n            'name' => 'required|unique:roles|max:32',\r\n            'permissions' => 'array',\r\n        ]);\r\n\r\n        $role = Role::create($data);\r\n\r\n        $permissions = Permission::find($request->permissions);\r\n        $role->syncPermissions($permissions);\r\n\r\n        return redirect()\r\n            ->route('roles.edit', $role->id)\r\n            ->withSuccess(__('crud.common.created'));\r\n    }\r\n\r\n    /**\r\n     * Display the specified resource.\r\n     */\r\n    public function show(Role $role): View\r\n    {\r\n        $this->authorize('view', Role::class);\r\n\r\n        return view('app.roles.show')->with('role', $role);\r\n    }\r\n\r\n    /**\r\n     * Show the form for editing the specified resource.\r\n     */\r\n    public function edit(Role $role): View\r\n    {\r\n        $this->authorize('update', $role);\r\n\r\n        $permissions = Permission::all();\r\n\r\n        return view('app.roles.edit')\r\n            ->with('role', $role)\r\n            ->with('permissions', $permissions);\r\n    }\r\n\r\n    /**\r\n     * Update the specified resource in storage.\r\n     */\r\n    public function update(Request $request, Role $role): RedirectResponse\r\n    {\r\n        $this->authorize('update', $role);\r\n\r\n        $data = $this->validate($request, [\r\n            'name' => 'required|max:32|unique:roles,name,'.$role->id,\r\n            'permissions' => 'array',\r\n        ]);\r\n        \r\n        $role->update($data);\r\n\r\n        $permissions = Permission::find($request->permissions);\r\n        $role->syncPermissions($permissions);\r\n\r\n        return redirect()\r\n            ->route('roles.edit', $role->id)\r\n            ->withSuccess(__('crud.common.saved'));\r\n    }\r\n\r\n    /**\r\n     * Remove the specified resource from storage.\r\n     */\r\n    public function destroy(Role $role): RedirectResponse\r\n    {\r\n        $this->authorize('delete', $role);\r\n\r\n        $role->delete();\r\n\r\n        return redirect()\r\n            ->route('roles.index')\r\n            ->withSuccess(__('crud.common.removed'));\r\n    }\r\n}","module":"permissions","path":"\\app\\Http\\Controllers\\RoleController.php"},"\\app\\Http\\Controllers\\PermissionController.php":{"deleteOnGeneration":true,"content":"<?php\r\n\r\nnamespace App\\Http\\Controllers;\r\n\r\nuse Illuminate\\View\\View;\r\nuse Illuminate\\Http\\Request;\r\nuse Spatie\\Permission\\Models\\Role;\r\nuse Illuminate\\Http\\RedirectResponse;\r\nuse Spatie\\Permission\\Models\\Permission;\r\n\r\nclass PermissionController extends Controller\r\n{\r\n    /**\r\n    * Display a listing of the resource.\r\n    */\r\n    public function index(Request $request): View\r\n    {\r\n        $this->authorize('list', Permission::class);\r\n\r\n        $search = $request->get('search', '');\r\n        $permissions = Permission::where('name', 'like', \"%{$search}%\")->paginate(10);\r\n\r\n        return view('app.permissions.index')\r\n            ->with('permissions', $permissions)\r\n            ->with('search', $search);\r\n    }\r\n\r\n    /**\r\n    * Show the form for creating a new resource.\r\n    */\r\n    public function create(): View\r\n    {\r\n        $this->authorize('create', Permission::class);\r\n\r\n        $roles = Role::all();\r\n        return view('app.permissions.create')->with('roles', $roles);\r\n    }\r\n\r\n    /**\r\n    * Store a newly created resource in storage.\r\n    */\r\n    public function store(Request $request): RedirectResponse\r\n    {\r\n\r\n        $this->authorize('create', Permission::class);\r\n\r\n        $data = $this->validate($request, [\r\n            'name' => 'required|max:64',\r\n            'roles' => 'array'\r\n        ]);\r\n\r\n        $permission = Permission::create($data);\r\n        \r\n        $roles = Role::find($request->roles);\r\n        $permission->syncRoles($roles);\r\n\r\n        return redirect()\r\n            ->route('permissions.edit', $permission->id)\r\n            ->withSuccess(__('crud.common.created'));\r\n    }\r\n\r\n    /**\r\n    * Display the specified resource.\r\n    */\r\n    public function show(Permission $permission): View\r\n    {\r\n        $this->authorize('view', Permission::class);\r\n\r\n        return view('app.permissions.show')->with('permission', $permission);\r\n    }\r\n\r\n    /**\r\n    * Show the form for editing the specified resource.\r\n    */\r\n    public function edit(Permission $permission): View\r\n    {\r\n        $this->authorize('update', $permission);\r\n\r\n        $roles = Role::get();\r\n\r\n        return view('app.permissions.edit')\r\n            ->with('permission', $permission)\r\n            ->with('roles', $roles);\r\n    }\r\n\r\n    /**\r\n    * Update the specified resource in storage.\r\n    */\r\n    public function update(Request $request, Permission $permission): RedirectResponse\r\n    {\r\n        $this->authorize('update', $permission);\r\n\r\n        $data = $this->validate($request, [\r\n            'name' => 'required|max:40',\r\n            'roles' => 'array'\r\n        ]);\r\n\r\n        $permission->update($data);\r\n        \r\n        $roles = Role::find($request->roles);\r\n        $permission->syncRoles($roles);\r\n\r\n        return redirect()\r\n            ->route('permissions.edit', $permission->id)\r\n            ->withSuccess(__('crud.common.saved'));\r\n    }\r\n\r\n    /**\r\n    * Remove the specified resource from storage.\r\n    */\r\n    public function destroy(Permission $permission): RedirectResponse\r\n    {\r\n        $this->authorize('delete', $permission);\r\n\r\n        $permission->delete();\r\n\r\n        return redirect()\r\n            ->route('permissions.index')\r\n            ->withSuccess(__('crud.common.removed'));\r\n    }\r\n}\r\n","module":"permissions","path":"\\app\\Http\\Controllers\\PermissionController.php"},"\\tests\\Feature\\Controllers\\RoleControllerTest.php":{"deleteOnGeneration":true,"content":"<?php\r\n\r\nnamespace Tests\\Feature\\Controllers;\r\n\r\nuse App\\Models\\User;\r\nuse Spatie\\Permission\\Models\\Role;\r\n\r\nuse Tests\\TestCase;\r\nuse Illuminate\\Foundation\\Testing\\WithFaker;\r\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\r\n\r\nclass RoleControllerTest extends TestCase\r\n{\r\n    use RefreshDatabase, WithFaker;\r\n\r\n    protected function setUp(): void\r\n    {\r\n        parent::setUp();\r\n\r\n        $this->actingAs(User::factory()->create(['email' => 'admin@admin.com']));\r\n        \r\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\r\n\r\n        $this->withoutExceptionHandling();\r\n    }\r\n\r\n    /**\r\n     * @test\r\n     */\r\n    public function it_displays_index_view_with_roles(): void\r\n    {\r\n        $response = $this->get(route('roles.index'));\r\n\r\n        $response\r\n            ->assertOk()\r\n            ->assertViewIs('app.roles.index')\r\n            ->assertViewHas('roles');\r\n    }\r\n\r\n    /**\r\n     * @test\r\n     */\r\n    public function it_displays_create_view_for_role(): void\r\n    {\r\n        $response = $this->get(route('roles.create'));\r\n\r\n        $response->assertOk()->assertViewIs('app.roles.create');\r\n    }\r\n\r\n    /**\r\n     * @test\r\n     */\r\n    public function it_stores_the_role(): void\r\n    {\r\n        $response = $this->post(route('roles.store'), [\r\n            'name' => 'secretary',\r\n            'permissions' => []\r\n        ]);\r\n\r\n        $this->assertDatabaseHas('roles', ['name' => 'secretary']);\r\n\r\n        $role = Role::latest('id')->first();\r\n\r\n        $response->assertRedirect(route('roles.edit', $role));\r\n    }\r\n\r\n    /**\r\n     * @test\r\n     */\r\n    public function it_displays_show_view_for_role(): void\r\n    {\r\n        $role = Role::first();\r\n\r\n        $response = $this->get(route('roles.show', $role));\r\n\r\n        $response\r\n            ->assertOk()\r\n            ->assertViewIs('app.roles.show')\r\n            ->assertViewHas('role');\r\n    }\r\n\r\n    /**\r\n     * @test\r\n     */\r\n    public function it_displays_edit_view_for_role(): void\r\n    {\r\n        $role = Role::first();\r\n\r\n        $response = $this->get(route('roles.edit', $role));\r\n\r\n        $response\r\n            ->assertOk()\r\n            ->assertViewIs('app.roles.edit')\r\n            ->assertViewHas('role');\r\n    }\r\n\r\n    /**\r\n     * @test\r\n     */\r\n    public function it_updates_the_role(): void\r\n    {\r\n        $role = Role::first();\r\n\r\n        $data = [\r\n            'name' => 'manager',\r\n            'permissions' => [],\r\n        ];\r\n\r\n        $response = $this->put(route('roles.update', $role), $data);\r\n\r\n        $this->assertDatabaseHas('roles', [\r\n            'id' => $role->id,\r\n            'name' => 'manager'\r\n        ]);\r\n\r\n        $response->assertRedirect(route('roles.edit', $role));\r\n    }\r\n\r\n    /**\r\n     * @test\r\n     */\r\n    public function it_deletes_the_role(): void\r\n    {\r\n        $role = Role::first();\r\n\r\n        $response = $this->delete(route('roles.destroy', $role));\r\n\r\n        $response->assertRedirect(route('roles.index'));\r\n        \r\n        $this->assertModelMissing($role);\r\n    }\r\n}\r\n","module":"permissions","path":"\\tests\\Feature\\Controllers\\RoleControllerTest.php"},"\\tests\\Feature\\Controllers\\PermissionControllerTest.php":{"deleteOnGeneration":true,"content":"<?php\r\n\r\nnamespace Tests\\Feature\\Controllers;\r\n\r\nuse App\\Models\\User;\r\nuse Spatie\\Permission\\Models\\Permission;\r\n\r\nuse Tests\\TestCase;\r\nuse Illuminate\\Foundation\\Testing\\WithFaker;\r\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\r\n\r\nclass PermissionControllerTest extends TestCase\r\n{\r\n    use RefreshDatabase, WithFaker;\r\n\r\n    protected function setUp(): void\r\n    {\r\n        parent::setUp();\r\n\r\n        $this->actingAs(User::factory()->create(['email' => 'admin@admin.com']));\r\n        \r\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\r\n\r\n        $this->withoutExceptionHandling();\r\n    }\r\n\r\n    /**\r\n     * @test\r\n     */\r\n    public function it_displays_index_view_with_permissions(): void\r\n    {\r\n        $response = $this->get(route('permissions.index'));\r\n\r\n        $response\r\n            ->assertOk()\r\n            ->assertViewIs('app.permissions.index')\r\n            ->assertViewHas('permissions');\r\n    }\r\n\r\n    /**\r\n     * @test\r\n     */\r\n    public function it_displays_create_view_for_permission(): void\r\n    {\r\n        $response = $this->get(route('permissions.create'));\r\n\r\n        $response->assertOk()->assertViewIs('app.permissions.create');\r\n    }\r\n\r\n    /**\r\n     * @test\r\n     */\r\n    public function it_stores_the_permission(): void\r\n    {\r\n        $response = $this->post(route('permissions.store'), [\r\n            'name' => 'list secretaries',\r\n            'roles' => []\r\n        ]);\r\n\r\n        $this->assertDatabaseHas('permissions', ['name' => 'list secretaries']);\r\n\r\n        $permission = Permission::latest('id')->first();\r\n\r\n        $response->assertRedirect(route('permissions.edit', $permission));\r\n    }\r\n\r\n    /**\r\n     * @test\r\n     */\r\n    public function it_displays_show_view_for_permission(): void\r\n    {\r\n        $permission = Permission::first();\r\n\r\n        $response = $this->get(route('permissions.show', $permission));\r\n\r\n        $response\r\n            ->assertOk()\r\n            ->assertViewIs('app.permissions.show')\r\n            ->assertViewHas('permission');\r\n    }\r\n\r\n    /**\r\n     * @test\r\n     */\r\n    public function it_displays_edit_view_for_permission(): void\r\n    {\r\n        $permission = Permission::first();\r\n\r\n        $response = $this->get(route('permissions.edit', $permission));\r\n\r\n        $response\r\n            ->assertOk()\r\n            ->assertViewIs('app.permissions.edit')\r\n            ->assertViewHas('permission');\r\n    }\r\n\r\n    /**\r\n     * @test\r\n     */\r\n    public function it_updates_the_permission(): void\r\n    {\r\n        $permission = Permission::first();\r\n\r\n        $data = [\r\n            'name' => 'list managers',\r\n            'roles' => [],\r\n        ];\r\n\r\n        $response = $this->put(route('permissions.update', $permission), $data);\r\n\r\n        $this->assertDatabaseHas('permissions', [\r\n            'id' => $permission->id,\r\n            'name' => 'list managers'\r\n        ]);\r\n\r\n        $response->assertRedirect(route('permissions.edit', $permission));\r\n    }\r\n\r\n    /**\r\n     * @test\r\n     */\r\n    public function it_deletes_the_permission(): void\r\n    {\r\n        $permission = Permission::first();\r\n\r\n        $response = $this->delete(route('permissions.destroy', $permission));\r\n\r\n        $response->assertRedirect(route('permissions.index'));\r\n        \r\n        $this->assertModelMissing($permission);\r\n    }\r\n}\r\n","module":"permissions","path":"\\tests\\Feature\\Controllers\\PermissionControllerTest.php"},"\\resources\\views\\app\\roles\\edit.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\r\n\r\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('roles.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.roles.edit_title')\n            </h4>\n\n            <x-form\n                method=\"PUT\"\n                action=\"{{ route('roles.update', $role) }}\"\n                class=\"mt-4\"\n            >\n                @include('app.roles.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a href=\"{{ route('roles.index') }}\" class=\"btn btn-light\">\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <a href=\"{{ route('roles.create') }}\" class=\"btn btn-light\">\n                        <i class=\"icon ion-md-add text-primary\"></i>\n                        @lang('crud.common.create')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.update')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud","path":"\\resources\\views\\app\\roles\\edit.blade.php"},"\\resources\\views\\app\\roles\\index.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"searchbar mt-0 mb-4\">\n        <div class=\"row\">\n            <div class=\"col-md-6\">\n                <form>\n                    <div class=\"input-group\">\n                        <input\n                            id=\"indexSearch\"\n                            type=\"text\"\n                            name=\"search\"\n                            placeholder=\"{{ __('crud.common.search') }}\"\n                            value=\"{{ $search ?? '' }}\"\n                            class=\"form-control\"\n                            autocomplete=\"off\"\n                        />\n                        <div class=\"input-group-append\">\n                            <button type=\"submit\" class=\"btn btn-primary\">\n                                <i class=\"icon ion-md-search\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n            <div class=\"col-md-6 text-right\">\n                @can('create', App\\Models\\Role::class)\n                <a href=\"{{ route('roles.create') }}\" class=\"btn btn-primary\">\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <div style=\"display: flex; justify-content: space-between;\">\n                <h4 class=\"card-title\">@lang('crud.roles.index_title')</h4>\n            </div>\n\n            <div class=\"table-responsive\">\n                <table class=\"table table-borderless table-hover\">\n                    <thead>\n                        <tr>\n                            <th class=\"text-left\">\n                                @lang('crud.roles.inputs.name')\n                            </th>\n                            <th class=\"text-center\">\n                                @lang('crud.common.actions')\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        @forelse($roles as $role)\n                        <tr>\n                            <td>{{ $role->name ?? '-' }}</td>\n                            <td class=\"text-center\" style=\"width: 134px;\">\n                                <div\n                                    role=\"group\"\n                                    aria-label=\"Row Actions\"\n                                    class=\"btn-group\"\n                                >\n                                    @can('update', $role)\n                                    <a href=\"{{ route('roles.edit', $role) }}\">\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-create\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('view', $role)\n                                    <a href=\"{{ route('roles.show', $role) }}\">\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-eye\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('delete', $role)\n                                    <form\n                                        action=\"{{ route('roles.destroy', $role) }}\"\n                                        method=\"POST\"\n                                        onsubmit=\"return confirm('{{ __('crud.common.are_you_sure') }}')\"\n                                    >\n                                        @csrf @method('DELETE')\n                                        <button\n                                            type=\"submit\"\n                                            class=\"btn btn-light text-danger\"\n                                        >\n                                            <i class=\"icon ion-md-trash\"></i>\n                                        </button>\n                                    </form>\n                                    @endcan\n                                </div>\n                            </td>\n                        </tr>\n                        @empty\n                        <tr>\n                            <td colspan=\"2\">\n                                @lang('crud.common.no_items_found')\n                            </td>\n                        </tr>\n                        @endforelse\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <td colspan=\"2\">{!! $roles->render() !!}</td>\n                        </tr>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud","path":"\\resources\\views\\app\\roles\\index.blade.php"},"\\resources\\views\\app\\roles\\create.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\r\n\r\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('roles.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.roles.create_title')\n            </h4>\n\n            <x-form\n                method=\"POST\"\n                action=\"{{ route('roles.store') }}\"\n                class=\"mt-4\"\n            >\n                @include('app.roles.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a href=\"{{ route('roles.index') }}\" class=\"btn btn-light\">\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.create')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud","path":"\\resources\\views\\app\\roles\\create.blade.php"},"\\resources\\views\\app\\roles\\show.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\r\n\r\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('roles.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.roles.show_title')\n            </h4>\n\n            <div class=\"mt-4\">\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.roles.inputs.name')</h5>\n                    <span>{{ $role->name ?? '-' }}</span>\n                </div>\n            </div>\n\n            <div class=\"mt-4\">\n                <a href=\"{{ route('roles.index') }}\" class=\"btn btn-light\">\n                    <i class=\"icon ion-md-return-left\"></i>\n                    @lang('crud.common.back')\n                </a>\n\n                @can('create', App\\Models\\Role::class)\n                <a href=\"{{ route('roles.create') }}\" class=\"btn btn-light\">\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud","path":"\\resources\\views\\app\\roles\\show.blade.php"},"\\resources\\views\\app\\roles\\form-inputs.blade.php":{"deleteOnGeneration":true,"content":"@php $editing = isset($role) @endphp\n\n<div class=\"row\">\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"name\"\n            label=\"Name\"\n            :value=\"old('name', ($editing ? $role->name : ''))\"\n        ></x-inputs.text>\n    </x-inputs.group>\n\n    <div class=\"form-group col-sm-12 mt-4\">\n        <h4>Assign @lang('crud.permissions.name')</h4>\n\n        @foreach ($permissions as $permission)\n        <div>\n            <x-inputs.checkbox\n                id=\"permission{{ $permission->id }}\"\n                name=\"permissions[]\"\n                label=\"{{ ucfirst($permission->name) }}\"\n                value=\"{{ $permission->id }}\"\n                :checked=\"isset($role) ? $role->hasPermissionTo($permission) : false\"\n                :add-hidden-value=\"false\"\n            ></x-inputs.checkbox>\n        </div>\n        @endforeach\n    </div>\n</div>\n","module":"crud","path":"\\resources\\views\\app\\roles\\form-inputs.blade.php"},"\\resources\\views\\app\\permissions\\edit.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\r\n\r\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('permissions.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.permissions.edit_title')\n            </h4>\n\n            <x-form\n                method=\"PUT\"\n                action=\"{{ route('permissions.update', $permission) }}\"\n                class=\"mt-4\"\n            >\n                @include('app.permissions.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a\n                        href=\"{{ route('permissions.index') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <a\n                        href=\"{{ route('permissions.create') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-add text-primary\"></i>\n                        @lang('crud.common.create')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.update')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud","path":"\\resources\\views\\app\\permissions\\edit.blade.php"},"\\resources\\views\\app\\permissions\\index.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"searchbar mt-0 mb-4\">\n        <div class=\"row\">\n            <div class=\"col-md-6\">\n                <form>\n                    <div class=\"input-group\">\n                        <input\n                            id=\"indexSearch\"\n                            type=\"text\"\n                            name=\"search\"\n                            placeholder=\"{{ __('crud.common.search') }}\"\n                            value=\"{{ $search ?? '' }}\"\n                            class=\"form-control\"\n                            autocomplete=\"off\"\n                        />\n                        <div class=\"input-group-append\">\n                            <button type=\"submit\" class=\"btn btn-primary\">\n                                <i class=\"icon ion-md-search\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n            <div class=\"col-md-6 text-right\">\n                @can('create', App\\Models\\Permission::class)\n                <a\n                    href=\"{{ route('permissions.create') }}\"\n                    class=\"btn btn-primary\"\n                >\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <div style=\"display: flex; justify-content: space-between;\">\n                <h4 class=\"card-title\">\n                    @lang('crud.permissions.index_title')\n                </h4>\n            </div>\n\n            <div class=\"table-responsive\">\n                <table class=\"table table-borderless table-hover\">\n                    <thead>\n                        <tr>\n                            <th class=\"text-left\">\n                                @lang('crud.permissions.inputs.name')\n                            </th>\n                            <th class=\"text-center\">\n                                @lang('crud.common.actions')\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        @forelse($permissions as $permission)\n                        <tr>\n                            <td>{{ $permission->name ?? '-' }}</td>\n                            <td class=\"text-center\" style=\"width: 134px;\">\n                                <div\n                                    role=\"group\"\n                                    aria-label=\"Row Actions\"\n                                    class=\"btn-group\"\n                                >\n                                    @can('update', $permission)\n                                    <a\n                                        href=\"{{ route('permissions.edit', $permission) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-create\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('view', $permission)\n                                    <a\n                                        href=\"{{ route('permissions.show', $permission) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-eye\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('delete', $permission)\n                                    <form\n                                        action=\"{{ route('permissions.destroy', $permission) }}\"\n                                        method=\"POST\"\n                                        onsubmit=\"return confirm('{{ __('crud.common.are_you_sure') }}')\"\n                                    >\n                                        @csrf @method('DELETE')\n                                        <button\n                                            type=\"submit\"\n                                            class=\"btn btn-light text-danger\"\n                                        >\n                                            <i class=\"icon ion-md-trash\"></i>\n                                        </button>\n                                    </form>\n                                    @endcan\n                                </div>\n                            </td>\n                        </tr>\n                        @empty\n                        <tr>\n                            <td colspan=\"2\">\n                                @lang('crud.common.no_items_found')\n                            </td>\n                        </tr>\n                        @endforelse\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <td colspan=\"2\">{!! $permissions->render() !!}</td>\n                        </tr>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud","path":"\\resources\\views\\app\\permissions\\index.blade.php"},"\\resources\\views\\app\\permissions\\create.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\r\n\r\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('permissions.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.permissions.create_title')\n            </h4>\n\n            <x-form\n                method=\"POST\"\n                action=\"{{ route('permissions.store') }}\"\n                class=\"mt-4\"\n            >\n                @include('app.permissions.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a\n                        href=\"{{ route('permissions.index') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.create')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud","path":"\\resources\\views\\app\\permissions\\create.blade.php"},"\\resources\\views\\app\\permissions\\show.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\r\n\r\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('permissions.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.permissions.show_title')\n            </h4>\n\n            <div class=\"mt-4\">\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.permissions.inputs.name')</h5>\n                    <span>{{ $permission->name ?? '-' }}</span>\n                </div>\n            </div>\n\n            <div class=\"mt-4\">\n                <a\n                    href=\"{{ route('permissions.index') }}\"\n                    class=\"btn btn-light\"\n                >\n                    <i class=\"icon ion-md-return-left\"></i>\n                    @lang('crud.common.back')\n                </a>\n\n                @can('create', App\\Models\\Permission::class)\n                <a\n                    href=\"{{ route('permissions.create') }}\"\n                    class=\"btn btn-light\"\n                >\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud","path":"\\resources\\views\\app\\permissions\\show.blade.php"},"\\resources\\views\\app\\permissions\\form-inputs.blade.php":{"deleteOnGeneration":true,"content":"@php $editing = isset($permission) @endphp\n\n<div class=\"row\">\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"name\"\n            label=\"Name\"\n            :value=\"old('name', ($editing ? $permission->name : ''))\"\n        ></x-inputs.text>\n    </x-inputs.group>\n\n    <div class=\"form-group col-sm-12 mt-4\">\n        <h4>Assign @lang('crud.roles.name')</h4>\n\n        @foreach ($roles as $role)\n        <div>\n            <x-inputs.checkbox\n                id=\"role{{ $role->id }}\"\n                name=\"roles[]\"\n                label=\"{{ ucfirst($role->name) }}\"\n                value=\"{{ $role->id }}\"\n                :checked=\"isset($permission) ? $role->hasPermissionTo($permission) : false\"\n                :add-hidden-value=\"false\"\n            ></x-inputs.checkbox>\n        </div>\n        @endforeach\n    </div>\n</div>\n","module":"crud","path":"\\resources\\views\\app\\permissions\\form-inputs.blade.php"},"\\vite.config.js":{"deleteOnGeneration":true,"content":"import { defineConfig } from 'vite';\r\nimport laravel from 'laravel-vite-plugin';\r\n\r\nexport default defineConfig({\r\n    plugins: [\r\n        laravel([\r\n            'resources/sass/app.scss',\r\n            'resources/js/app.js',\r\n        ]),\r\n    ],\r\n});","module":"base","path":"\\vite.config.js"},"\\resources\\js\\bootstrap.js":{"deleteOnGeneration":true,"content":"import _ from 'lodash';\r\nwindow._ = _;\r\n\r\n/**\r\n * We'll load jQuery and the Bootstrap jQuery plugin which provides support\r\n * for JavaScript based Bootstrap features such as modals and tabs. This\r\n * code may be modified to fit the specific needs of your application.\r\n */\r\n\r\nimport popper from 'popper.js';\r\nimport jquery from 'jquery';\r\nimport bootstrap from 'bootstrap';\r\n\r\ntry {\r\n\r\n    window.Popper = popper;\r\n    window.$ = window.jQuery = jquery;\r\n    \r\n} catch (e) {}\r\n\r\n/**\r\n * We'll load the axios HTTP library which allows us to easily issue requests\r\n * to our Laravel back-end. This library automatically handles sending the\r\n * CSRF token as a header based on the value of the \"XSRF\" token cookie.\r\n */\r\n\r\n import axios from 'axios';\r\n window.axios = axios;\r\n \r\n window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\r\n\r\n/**\r\n * Echo exposes an expressive API for subscribing to channels and listening\r\n * for events that are broadcast by Laravel. Echo and event broadcasting\r\n * allows your team to easily build robust real-time web applications.\r\n */\r\n\r\n// import Echo from 'laravel-echo';\r\n\r\n// window.Pusher = require('pusher-js');\r\n\r\n// window.Echo = new Echo({\r\n//     broadcaster: 'pusher',\r\n//     key: process.env.MIX_PUSHER_APP_KEY,\r\n//     cluster: process.env.MIX_PUSHER_APP_CLUSTER,\r\n//     forceTLS: true\r\n// });\r\n","module":"base","path":"\\resources\\js\\bootstrap.js"},"\\resources\\sass\\app.scss":{"deleteOnGeneration":true,"content":"// Fonts\r\n@import url('https://fonts.googleapis.com/css?family=Nunito');\r\n\r\n// Variables\r\n@import 'variables';\r\n\r\n// Bootstrap\r\n@import 'node_modules/bootstrap/scss/bootstrap';","module":"base","path":"\\resources\\sass\\app.scss"},"\\resources\\views\\layouts\\sidebar.blade.php":{"deleteOnGeneration":true,"content":"<!-- Main Sidebar Container -->\n<aside class=\"main-sidebar sidebar-dark-primary elevation-4\">\n    <!-- Brand Logo -->\n    <a href=\"{{ url('/') }}\" class=\"brand-link\">\n        <img src=\"https://vemto.app/favicon.png\" alt=\"Vemto Logo\" class=\"brand-image bg-white img-circle\">\n        <span class=\"brand-text font-weight-light\">Event Photo Sharing</span>\n    </a>\n\n    <!-- Sidebar -->\n    <div class=\"sidebar\">\n\n        <!-- Sidebar Menu -->\n        <nav class=\"mt-2\">\n            <ul class=\"nav nav-pills nav-sidebar flex-column nav-child-indent\" data-widget=\"treeview\" role=\"menu\">\n\n                @auth\n                <li class=\"nav-item\">\n                    <a href=\"{{ route('home') }}\" class=\"nav-link\">\n                        <i class=\"nav-icon icon ion-md-pulse\"></i>\n                        <p>\n                            Dashboard\n                        </p>\n                    </a>\n                </li>\n\n                <li class=\"nav-item\">\n                    <a href=\"#\" class=\"nav-link\">\n                        <i class=\"nav-icon icon ion-md-apps\"></i>\n                        <p>\n                            Apps\n                            <i class=\"nav-icon right icon ion-md-arrow-round-back\"></i>\n                        </p>\n                    </a>\n                    <ul class=\"nav nav-treeview\">\n                            @can('view-any', App\\Models\\User::class)\n                            <li class=\"nav-item\">\n                                <a href=\"{{ route('users.index') }}\" class=\"nav-link\">\n                                    <i class=\"nav-icon icon ion-md-radio-button-off\"></i>\n                                    <p>Users</p>\n                                </a>\n                            </li>\n                            @endcan\n                            @can('view-any', App\\Models\\Event::class)\n                            <li class=\"nav-item\">\n                                <a href=\"{{ route('events.index') }}\" class=\"nav-link\">\n                                    <i class=\"nav-icon icon ion-md-radio-button-off\"></i>\n                                    <p>Events</p>\n                                </a>\n                            </li>\n                            @endcan\n                            @can('view-any', App\\Models\\Photo::class)\n                            <li class=\"nav-item\">\n                                <a href=\"{{ route('photos.index') }}\" class=\"nav-link\">\n                                    <i class=\"nav-icon icon ion-md-radio-button-off\"></i>\n                                    <p>Photos</p>\n                                </a>\n                            </li>\n                            @endcan\n                            @can('view-any', App\\Models\\Invitation::class)\n                            <li class=\"nav-item\">\n                                <a href=\"{{ route('invitations.index') }}\" class=\"nav-link\">\n                                    <i class=\"nav-icon icon ion-md-radio-button-off\"></i>\n                                    <p>Invitations</p>\n                                </a>\n                            </li>\n                            @endcan\n                            @can('view-any', App\\Models\\Comment::class)\n                            <li class=\"nav-item\">\n                                <a href=\"{{ route('comments.index') }}\" class=\"nav-link\">\n                                    <i class=\"nav-icon icon ion-md-radio-button-off\"></i>\n                                    <p>Comments</p>\n                                </a>\n                            </li>\n                            @endcan\n                    </ul>\n                </li>\n\n                @if (Auth::user()->can('view-any', Spatie\\Permission\\Models\\Role::class) || \n                    Auth::user()->can('view-any', Spatie\\Permission\\Models\\Permission::class))\n                <li class=\"nav-item\">\n                    <a href=\"#\" class=\"nav-link\">\n                        <i class=\"nav-icon icon ion-md-key\"></i>\n                        <p>\n                            Access Management\n                            <i class=\"nav-icon right icon ion-md-arrow-round-back\"></i>\n                        </p>\n                    </a>\n                    <ul class=\"nav nav-treeview\">\n                        @can('view-any', Spatie\\Permission\\Models\\Role::class)\n                        <li class=\"nav-item\">\n                            <a href=\"{{ route('roles.index') }}\" class=\"nav-link\">\n                                <i class=\"nav-icon icon ion-md-radio-button-off\"></i>\n                                <p>Roles</p>\n                            </a>\n                        </li>\n                        @endcan\n\n                        @can('view-any', Spatie\\Permission\\Models\\Permission::class)\n                        <li class=\"nav-item\">\n                            <a href=\"{{ route('permissions.index') }}\" class=\"nav-link\">\n                                <i class=\"nav-icon icon ion-md-radio-button-off\"></i>\n                                <p>Permissions</p>\n                            </a>\n                        </li>\n                        @endcan\n                    </ul>\n                </li>\n                @endif\n                @endauth\n\n                <li class=\"nav-item\">\n                    <a href=\"https://adminlte.io/docs/3.1//index.html\" target=\"_blank\" class=\"nav-link\">\n                        <i class=\"nav-icon icon ion-md-help-circle-outline\"></i>\n                        <p>Docs</p>\n                    </a>\n                </li>\n\n                @auth\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{{ route('logout') }}\" onclick=\"event.preventDefault(); document.getElementById('logout-form').submit();\">\n                        <i class=\"nav-icon icon ion-md-exit\"></i>\n                        <p>{{ __('Logout') }}</p>\n                    </a>\n\n                    <form id=\"logout-form\" action=\"{{ route('logout') }}\" method=\"POST\" style=\"display: none;\">\n                        @csrf\n                    </form>\n                </li>\n                @endauth\n            </ul>\n        </nav>\n        <!-- /.sidebar-menu -->\n    </div>\n    <!-- /.sidebar -->\n</aside>","module":"plugin:app.vemto.admin-lte","path":"\\resources\\views\\layouts\\sidebar.blade.php"},"\\app\\Http\\Requests\\UserStoreRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Validation\\Rule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass UserStoreRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     */\n    public function rules(): array\n    {\n        return [\n            'name' => ['required', 'max:255', 'string'],\n            'email' => ['required', 'unique:users,email', 'email'],\n            'password' => ['required'],\n            'roles' => 'array',\n        ];\n    }\n}\n","module":"crud:11","path":"\\app\\Http\\Requests\\UserStoreRequest.php"},"\\app\\Http\\Requests\\UserUpdateRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Validation\\Rule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass UserUpdateRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     */\n    public function rules(): array\n    {\n        return [\n            'name' => ['required', 'max:255', 'string'],\n            'email' => [\n                'required',\n                Rule::unique('users', 'email')->ignore($this->user),\n                'email',\n            ],\n            'password' => ['nullable'],\n            'roles' => 'array',\n        ];\n    }\n}\n","module":"crud:11","path":"\\app\\Http\\Requests\\UserUpdateRequest.php"},"\\app\\Http\\Controllers\\UserController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\User;\nuse Illuminate\\View\\View;\nuse Illuminate\\Http\\Request;\nuse Spatie\\Permission\\Models\\Role;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Http\\RedirectResponse;\nuse App\\Http\\Requests\\UserStoreRequest;\nuse App\\Http\\Requests\\UserUpdateRequest;\n\nclass UserController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     */\n    public function index(Request $request): View\n    {\n        $this->authorize('view-any', User::class);\n\n        $search = $request->get('search', '');\n\n        $users = User::search($search)\n            ->latest()\n            ->paginate(5)\n            ->withQueryString();\n\n        return view('app.users.index', compact('users', 'search'));\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     */\n    public function create(Request $request): View\n    {\n        $this->authorize('create', User::class);\n\n        $roles = Role::get();\n\n        return view('app.users.create', compact('roles'));\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     */\n    public function store(UserStoreRequest $request): RedirectResponse\n    {\n        $this->authorize('create', User::class);\n\n        $validated = $request->validated();\n\n        $validated['password'] = Hash::make($validated['password']);\n\n        $user = User::create($validated);\n\n        $user->syncRoles($request->roles);\n\n        return redirect()\n            ->route('users.edit', $user)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n     * Display the specified resource.\n     */\n    public function show(Request $request, User $user): View\n    {\n        $this->authorize('view', $user);\n\n        return view('app.users.show', compact('user'));\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     */\n    public function edit(Request $request, User $user): View\n    {\n        $this->authorize('update', $user);\n\n        $roles = Role::get();\n\n        return view('app.users.edit', compact('user', 'roles'));\n    }\n\n    /**\n     * Update the specified resource in storage.\n     */\n    public function update(\n        UserUpdateRequest $request,\n        User $user\n    ): RedirectResponse {\n        $this->authorize('update', $user);\n\n        $validated = $request->validated();\n\n        if (empty($validated['password'])) {\n            unset($validated['password']);\n        } else {\n            $validated['password'] = Hash::make($validated['password']);\n        }\n\n        $user->update($validated);\n\n        $user->syncRoles($request->roles);\n\n        return redirect()\n            ->route('users.edit', $user)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     */\n    public function destroy(Request $request, User $user): RedirectResponse\n    {\n        $this->authorize('delete', $user);\n\n        $user->delete();\n\n        return redirect()\n            ->route('users.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}\n","module":"crud:11","path":"\\app\\Http\\Controllers\\UserController.php"},"\\tests\\Feature\\Controllers\\UserControllerTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\User;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass UserControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(\n            User::factory()->create(['email' => 'admin@admin.com'])\n        );\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_users(): void\n    {\n        $users = User::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->get(route('users.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.users.index')\n            ->assertViewHas('users');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_user(): void\n    {\n        $response = $this->get(route('users.create'));\n\n        $response->assertOk()->assertViewIs('app.users.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_user(): void\n    {\n        $data = User::factory()\n            ->make()\n            ->toArray();\n        $data['password'] = \\Str::random('8');\n\n        $response = $this->post(route('users.store'), $data);\n\n        unset($data['password']);\n        unset($data['email_verified_at']);\n\n        $this->assertDatabaseHas('users', $data);\n\n        $user = User::latest('id')->first();\n\n        $response->assertRedirect(route('users.edit', $user));\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_user(): void\n    {\n        $user = User::factory()->create();\n\n        $response = $this->get(route('users.show', $user));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.users.show')\n            ->assertViewHas('user');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_user(): void\n    {\n        $user = User::factory()->create();\n\n        $response = $this->get(route('users.edit', $user));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.users.edit')\n            ->assertViewHas('user');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_user(): void\n    {\n        $user = User::factory()->create();\n\n        $data = [\n            'name' => $this->faker->name(),\n            'email' => $this->faker->unique->email(),\n        ];\n\n        $data['password'] = \\Str::random('8');\n\n        $response = $this->put(route('users.update', $user), $data);\n\n        unset($data['password']);\n        unset($data['email_verified_at']);\n\n        $data['id'] = $user->id;\n\n        $this->assertDatabaseHas('users', $data);\n\n        $response->assertRedirect(route('users.edit', $user));\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_user(): void\n    {\n        $user = User::factory()->create();\n\n        $response = $this->delete(route('users.destroy', $user));\n\n        $response->assertRedirect(route('users.index'));\n\n        $this->assertModelMissing($user);\n    }\n}\n","module":"crud:11","path":"\\tests\\Feature\\Controllers\\UserControllerTest.php"},"\\resources\\views\\app\\users\\create.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\r\n\r\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('users.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.users.create_title')\n            </h4>\n\n            <x-form\n                method=\"POST\"\n                action=\"{{ route('users.store') }}\"\n                class=\"mt-4\"\n            >\n                @include('app.users.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a href=\"{{ route('users.index') }}\" class=\"btn btn-light\">\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.create')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:11","path":"\\resources\\views\\app\\users\\create.blade.php"},"\\resources\\views\\app\\users\\edit.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\r\n\r\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('users.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.users.edit_title')\n            </h4>\n\n            <x-form\n                method=\"PUT\"\n                action=\"{{ route('users.update', $user) }}\"\n                class=\"mt-4\"\n            >\n                @include('app.users.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a href=\"{{ route('users.index') }}\" class=\"btn btn-light\">\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <a href=\"{{ route('users.create') }}\" class=\"btn btn-light\">\n                        <i class=\"icon ion-md-add text-primary\"></i>\n                        @lang('crud.common.create')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.update')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:11","path":"\\resources\\views\\app\\users\\edit.blade.php"},"\\resources\\views\\app\\users\\form-inputs.blade.php":{"deleteOnGeneration":true,"content":"@php $editing = isset($user) @endphp\n\n<div class=\"row\">\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"name\"\n            label=\"Name\"\n            :value=\"old('name', ($editing ? $user->name : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Name\"\n            required\n        ></x-inputs.text>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12 col-lg-6\">\n        <x-inputs.email\n            name=\"email\"\n            label=\"Email\"\n            :value=\"old('email', ($editing ? $user->email : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Email\"\n            required\n        ></x-inputs.email>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12 col-lg-6\">\n        <x-inputs.password\n            name=\"password\"\n            label=\"Password\"\n            maxlength=\"255\"\n            placeholder=\"Password\"\n            :required=\"!$editing\"\n        ></x-inputs.password>\n    </x-inputs.group>\n\n    <div class=\"form-group col-sm-12 mt-4\">\n        <h4>Assign @lang('crud.roles.name')</h4>\n\n        @foreach ($roles as $role)\n        <div>\n            <x-inputs.checkbox\n                id=\"role{{ $role->id }}\"\n                name=\"roles[]\"\n                label=\"{{ ucfirst($role->name) }}\"\n                value=\"{{ $role->id }}\"\n                :checked=\"isset($user) ? $user->hasRole($role) : false\"\n                :add-hidden-value=\"false\"\n            ></x-inputs.checkbox>\n        </div>\n        @endforeach\n    </div>\n</div>\n","module":"crud:11","path":"\\resources\\views\\app\\users\\form-inputs.blade.php"},"\\resources\\views\\app\\users\\show.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\r\n\r\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('users.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.users.show_title')\n            </h4>\n\n            <div class=\"mt-4\">\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.users.inputs.name')</h5>\n                    <span>{{ $user->name ?? '-' }}</span>\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.users.inputs.email')</h5>\n                    <span>{{ $user->email ?? '-' }}</span>\n                </div>\n            </div>\n\n            <div class=\"mt-4\">\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.roles.name')</h5>\n                    <div>\n                        @forelse ($user->roles as $role)\n                        <div class=\"badge badge-primary\">{{ $role->name }}</div>\n                        <br />\n                        @empty - @endforelse\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"mt-4\">\n                <a href=\"{{ route('users.index') }}\" class=\"btn btn-light\">\n                    <i class=\"icon ion-md-return-left\"></i>\n                    @lang('crud.common.back')\n                </a>\n\n                @can('create', App\\Models\\User::class)\n                <a href=\"{{ route('users.create') }}\" class=\"btn btn-light\">\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:11","path":"\\resources\\views\\app\\users\\show.blade.php"},"\\resources\\views\\app\\users\\index.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"searchbar mt-0 mb-4\">\n        <div class=\"row\">\n            <div class=\"col-md-6\">\n                <form>\n                    <div class=\"input-group\">\n                        <input\n                            id=\"indexSearch\"\n                            type=\"text\"\n                            name=\"search\"\n                            placeholder=\"{{ __('crud.common.search') }}\"\n                            value=\"{{ $search ?? '' }}\"\n                            class=\"form-control\"\n                            autocomplete=\"off\"\n                        />\n                        <div class=\"input-group-append\">\n                            <button type=\"submit\" class=\"btn btn-primary\">\n                                <i class=\"icon ion-md-search\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n            <div class=\"col-md-6 text-right\">\n                @can('create', App\\Models\\User::class)\n                <a href=\"{{ route('users.create') }}\" class=\"btn btn-primary\">\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <div style=\"display: flex; justify-content: space-between;\">\n                <h4 class=\"card-title\">@lang('crud.users.index_title')</h4>\n            </div>\n\n            <div class=\"table-responsive\">\n                <table class=\"table table-borderless table-hover\">\n                    <thead>\n                        <tr>\n                            <th class=\"text-left\">\n                                @lang('crud.users.inputs.name')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.users.inputs.email')\n                            </th>\n                            <th class=\"text-center\">\n                                @lang('crud.common.actions')\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        @forelse($users as $user)\n                        <tr>\n                            <td>{{ $user->name ?? '-' }}</td>\n                            <td>{{ $user->email ?? '-' }}</td>\n                            <td class=\"text-center\" style=\"width: 134px;\">\n                                <div\n                                    role=\"group\"\n                                    aria-label=\"Row Actions\"\n                                    class=\"btn-group\"\n                                >\n                                    @can('update', $user)\n                                    <a href=\"{{ route('users.edit', $user) }}\">\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-create\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('view', $user)\n                                    <a href=\"{{ route('users.show', $user) }}\">\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-eye\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('delete', $user)\n                                    <form\n                                        action=\"{{ route('users.destroy', $user) }}\"\n                                        method=\"POST\"\n                                        onsubmit=\"return confirm('{{ __('crud.common.are_you_sure') }}')\"\n                                    >\n                                        @csrf @method('DELETE')\n                                        <button\n                                            type=\"submit\"\n                                            class=\"btn btn-light text-danger\"\n                                        >\n                                            <i class=\"icon ion-md-trash\"></i>\n                                        </button>\n                                    </form>\n                                    @endcan\n                                </div>\n                            </td>\n                        </tr>\n                        @empty\n                        <tr>\n                            <td colspan=\"3\">\n                                @lang('crud.common.no_items_found')\n                            </td>\n                        </tr>\n                        @endforelse\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <td colspan=\"3\">{!! $users->render() !!}</td>\n                        </tr>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:11","path":"\\resources\\views\\app\\users\\index.blade.php"},"\\app\\Http\\Resources\\UserResource.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass UserResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     */\n    public function toArray(Request $request): array\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:13","path":"\\app\\Http\\Resources\\UserResource.php"},"\\app\\Http\\Resources\\UserCollection.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     */\n    public function toArray(Request $request): array\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:13","path":"\\app\\Http\\Resources\\UserCollection.php"},"\\app\\Http\\Controllers\\Api\\UserController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\User;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Response;\nuse App\\Http\\Resources\\UserResource;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Http\\Resources\\UserCollection;\nuse App\\Http\\Requests\\UserStoreRequest;\nuse App\\Http\\Requests\\UserUpdateRequest;\n\nclass UserController extends Controller\n{\n    public function index(Request $request): UserCollection\n    {\n        $this->authorize('view-any', User::class);\n\n        $search = $request->get('search', '');\n\n        $users = User::search($search)\n            ->latest()\n            ->paginate();\n\n        return new UserCollection($users);\n    }\n\n    public function store(UserStoreRequest $request): UserResource\n    {\n        $this->authorize('create', User::class);\n\n        $validated = $request->validated();\n\n        $validated['password'] = Hash::make($validated['password']);\n\n        $user = User::create($validated);\n\n        $user->syncRoles($request->roles);\n\n        return new UserResource($user);\n    }\n\n    public function show(Request $request, User $user): UserResource\n    {\n        $this->authorize('view', $user);\n\n        return new UserResource($user);\n    }\n\n    public function update(UserUpdateRequest $request, User $user): UserResource\n    {\n        $this->authorize('update', $user);\n\n        $validated = $request->validated();\n\n        if (empty($validated['password'])) {\n            unset($validated['password']);\n        } else {\n            $validated['password'] = Hash::make($validated['password']);\n        }\n\n        $user->update($validated);\n\n        $user->syncRoles($request->roles);\n\n        return new UserResource($user);\n    }\n\n    public function destroy(Request $request, User $user): Response\n    {\n        $this->authorize('delete', $user);\n\n        $user->delete();\n\n        return response()->noContent();\n    }\n}\n","module":"crud:11","path":"\\app\\Http\\Controllers\\Api\\UserController.php"},"\\tests\\Feature\\Api\\UserTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass UserTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_users_list(): void\n    {\n        $users = User::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->getJson(route('api.users.index'));\n\n        $response->assertOk()->assertSee($users[0]->name);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_user(): void\n    {\n        $data = User::factory()\n            ->make()\n            ->toArray();\n        $data['password'] = \\Str::random('8');\n\n        $response = $this->postJson(route('api.users.store'), $data);\n\n        unset($data['password']);\n        unset($data['email_verified_at']);\n\n        $this->assertDatabaseHas('users', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_user(): void\n    {\n        $user = User::factory()->create();\n\n        $data = [\n            'name' => $this->faker->name(),\n            'email' => $this->faker->unique->email(),\n        ];\n\n        $data['password'] = \\Str::random('8');\n\n        $response = $this->putJson(route('api.users.update', $user), $data);\n\n        unset($data['password']);\n        unset($data['email_verified_at']);\n\n        $data['id'] = $user->id;\n\n        $this->assertDatabaseHas('users', $data);\n\n        $response->assertOk()->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_user(): void\n    {\n        $user = User::factory()->create();\n\n        $response = $this->deleteJson(route('api.users.destroy', $user));\n\n        $this->assertModelMissing($user);\n\n        $response->assertNoContent();\n    }\n}\n","module":"crud:11","path":"\\tests\\Feature\\Api\\UserTest.php"},"\\app\\Http\\Resources\\EventResource.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass EventResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     */\n    public function toArray(Request $request): array\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:14","path":"\\app\\Http\\Resources\\EventResource.php"},"\\app\\Http\\Resources\\EventCollection.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass EventCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     */\n    public function toArray(Request $request): array\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:14","path":"\\app\\Http\\Resources\\EventCollection.php"},"\\app\\Http\\Controllers\\Api\\UserEventsController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\User;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\EventResource;\nuse App\\Http\\Resources\\EventCollection;\n\nclass UserEventsController extends Controller\n{\n    public function index(Request $request, User $user): EventCollection\n    {\n        $this->authorize('view', $user);\n\n        $search = $request->get('search', '');\n\n        $events = $user\n            ->events()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new EventCollection($events);\n    }\n\n    public function store(Request $request, User $user): EventResource\n    {\n        $this->authorize('create', Event::class);\n\n        $validated = $request->validate([\n            'gallery_name' => ['required', 'max:255', 'string'],\n            'max_photos' => ['nullable', 'numeric'],\n            'max_users' => ['required', 'numeric'],\n            'expiration_date' => ['nullable', 'date'],\n        ]);\n\n        $event = $user->events()->create($validated);\n\n        return new EventResource($event);\n    }\n}\n","module":"crud:11","path":"\\app\\Http\\Controllers\\Api\\UserEventsController.php"},"\\tests\\Feature\\Api\\UserEventsTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Event;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass UserEventsTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_user_events(): void\n    {\n        $user = User::factory()->create();\n        $events = Event::factory()\n            ->count(2)\n            ->create([\n                'user_id' => $user->id,\n            ]);\n\n        $response = $this->getJson(route('api.users.events.index', $user));\n\n        $response->assertOk()->assertSee($events[0]->gallery_name);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_user_events(): void\n    {\n        $user = User::factory()->create();\n        $data = Event::factory()\n            ->make([\n                'user_id' => $user->id,\n            ])\n            ->toArray();\n\n        $response = $this->postJson(\n            route('api.users.events.store', $user),\n            $data\n        );\n\n        $this->assertDatabaseHas('events', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n\n        $event = Event::latest('id')->first();\n\n        $this->assertEquals($user->id, $event->user_id);\n    }\n}\n","module":"crud:11","path":"\\tests\\Feature\\Api\\UserEventsTest.php"},"\\app\\Http\\Requests\\EventStoreRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass EventStoreRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     */\n    public function rules(): array\n    {\n        return [\n            'gallery_name' => ['required', 'max:255', 'string'],\n            'max_photos' => ['nullable', 'numeric'],\n            'max_users' => ['required', 'numeric'],\n            'expiration_date' => ['nullable', 'date'],\n            'user_id' => ['required', 'exists:users,id'],\n        ];\n    }\n}\n","module":"crud:12","path":"\\app\\Http\\Requests\\EventStoreRequest.php"},"\\app\\Http\\Requests\\EventUpdateRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass EventUpdateRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     */\n    public function rules(): array\n    {\n        return [\n            'gallery_name' => ['required', 'max:255', 'string'],\n            'max_photos' => ['nullable', 'numeric'],\n            'max_users' => ['required', 'numeric'],\n            'expiration_date' => ['nullable', 'date'],\n            'user_id' => ['required', 'exists:users,id'],\n        ];\n    }\n}\n","module":"crud:12","path":"\\app\\Http\\Requests\\EventUpdateRequest.php"},"\\app\\Http\\Controllers\\EventController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Models\\Event;\nuse Illuminate\\View\\View;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\RedirectResponse;\nuse App\\Http\\Requests\\EventStoreRequest;\nuse App\\Http\\Requests\\EventUpdateRequest;\n\nclass EventController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     */\n    public function index(Request $request): View\n    {\n        $this->authorize('view-any', Event::class);\n\n        $search = $request->get('search', '');\n\n        $events = Event::search($search)\n            ->latest()\n            ->paginate(5)\n            ->withQueryString();\n\n        return view('app.events.index', compact('events', 'search'));\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     */\n    public function create(Request $request): View\n    {\n        $this->authorize('create', Event::class);\n\n        $users = User::pluck('name', 'id');\n\n        return view('app.events.create', compact('users'));\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     */\n    public function store(EventStoreRequest $request): RedirectResponse\n    {\n        $this->authorize('create', Event::class);\n\n        $validated = $request->validated();\n\n        $event = Event::create($validated);\n\n        return redirect()\n            ->route('events.edit', $event)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n     * Display the specified resource.\n     */\n    public function show(Request $request, Event $event): View\n    {\n        $this->authorize('view', $event);\n\n        return view('app.events.show', compact('event'));\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     */\n    public function edit(Request $request, Event $event): View\n    {\n        $this->authorize('update', $event);\n\n        $users = User::pluck('name', 'id');\n\n        return view('app.events.edit', compact('event', 'users'));\n    }\n\n    /**\n     * Update the specified resource in storage.\n     */\n    public function update(\n        EventUpdateRequest $request,\n        Event $event\n    ): RedirectResponse {\n        $this->authorize('update', $event);\n\n        $validated = $request->validated();\n\n        $event->update($validated);\n\n        return redirect()\n            ->route('events.edit', $event)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     */\n    public function destroy(Request $request, Event $event): RedirectResponse\n    {\n        $this->authorize('delete', $event);\n\n        $event->delete();\n\n        return redirect()\n            ->route('events.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}\n","module":"crud:12","path":"\\app\\Http\\Controllers\\EventController.php"},"\\tests\\Feature\\Controllers\\EventControllerTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Models\\Event;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass EventControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(\n            User::factory()->create(['email' => 'admin@admin.com'])\n        );\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_events(): void\n    {\n        $events = Event::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->get(route('events.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.events.index')\n            ->assertViewHas('events');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_event(): void\n    {\n        $response = $this->get(route('events.create'));\n\n        $response->assertOk()->assertViewIs('app.events.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_event(): void\n    {\n        $data = Event::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->post(route('events.store'), $data);\n\n        $this->assertDatabaseHas('events', $data);\n\n        $event = Event::latest('id')->first();\n\n        $response->assertRedirect(route('events.edit', $event));\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_event(): void\n    {\n        $event = Event::factory()->create();\n\n        $response = $this->get(route('events.show', $event));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.events.show')\n            ->assertViewHas('event');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_event(): void\n    {\n        $event = Event::factory()->create();\n\n        $response = $this->get(route('events.edit', $event));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.events.edit')\n            ->assertViewHas('event');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_event(): void\n    {\n        $event = Event::factory()->create();\n\n        $user = User::factory()->create();\n\n        $data = [\n            'gallery_name' => $this->faker->text(15),\n            'max_photos' => $this->faker->randomNumber(),\n            'max_users' => $this->faker->randomNumber(),\n            'expiration_date' => $this->faker->date(),\n            'user_id' => $user->id,\n        ];\n\n        $response = $this->put(route('events.update', $event), $data);\n\n        $data['id'] = $event->id;\n\n        $this->assertDatabaseHas('events', $data);\n\n        $response->assertRedirect(route('events.edit', $event));\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_event(): void\n    {\n        $event = Event::factory()->create();\n\n        $response = $this->delete(route('events.destroy', $event));\n\n        $response->assertRedirect(route('events.index'));\n\n        $this->assertModelMissing($event);\n    }\n}\n","module":"crud:12","path":"\\tests\\Feature\\Controllers\\EventControllerTest.php"},"\\resources\\views\\app\\events\\create.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\r\n\r\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('events.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.events.create_title')\n            </h4>\n\n            <x-form\n                method=\"POST\"\n                action=\"{{ route('events.store') }}\"\n                class=\"mt-4\"\n            >\n                @include('app.events.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a href=\"{{ route('events.index') }}\" class=\"btn btn-light\">\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.create')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:12","path":"\\resources\\views\\app\\events\\create.blade.php"},"\\resources\\views\\app\\events\\edit.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\r\n\r\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('events.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.events.edit_title')\n            </h4>\n\n            <x-form\n                method=\"PUT\"\n                action=\"{{ route('events.update', $event) }}\"\n                class=\"mt-4\"\n            >\n                @include('app.events.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a href=\"{{ route('events.index') }}\" class=\"btn btn-light\">\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <a\n                        href=\"{{ route('events.create') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-add text-primary\"></i>\n                        @lang('crud.common.create')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.update')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:12","path":"\\resources\\views\\app\\events\\edit.blade.php"},"\\resources\\views\\app\\events\\form-inputs.blade.php":{"deleteOnGeneration":true,"content":"@php $editing = isset($event) @endphp\n\n<div class=\"row\">\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"gallery_name\"\n            label=\"Gallery Name\"\n            :value=\"old('gallery_name', ($editing ? $event->gallery_name : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Gallery Name\"\n            required\n        ></x-inputs.text>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.number\n            name=\"max_photos\"\n            label=\"Max Photos\"\n            :value=\"old('max_photos', ($editing ? $event->max_photos : ''))\"\n            max=\"255\"\n            placeholder=\"Max Photos\"\n        ></x-inputs.number>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.number\n            name=\"max_users\"\n            label=\"Max Users\"\n            :value=\"old('max_users', ($editing ? $event->max_users : ''))\"\n            max=\"255\"\n            placeholder=\"Max Users\"\n            required\n        ></x-inputs.number>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.date\n            name=\"expiration_date\"\n            label=\"Expiration Date\"\n            value=\"{{ old('expiration_date', ($editing ? optional($event->expiration_date)->format('Y-m-d') : '')) }}\"\n            max=\"255\"\n        ></x-inputs.date>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.select name=\"user_id\" label=\"User\" required>\n            @php $selected = old('user_id', ($editing ? $event->user_id : '')) @endphp\n            <option disabled {{ empty($selected) ? 'selected' : '' }}>Please select the User</option>\n            @foreach($users as $value => $label)\n            <option value=\"{{ $value }}\" {{ $selected == $value ? 'selected' : '' }} >{{ $label }}</option>\n            @endforeach\n        </x-inputs.select>\n    </x-inputs.group>\n</div>\n","module":"crud:12","path":"\\resources\\views\\app\\events\\form-inputs.blade.php"},"\\resources\\views\\app\\events\\show.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\r\n\r\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('events.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.events.show_title')\n            </h4>\n\n            <div class=\"mt-4\">\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.events.inputs.gallery_name')</h5>\n                    <span>{{ $event->gallery_name ?? '-' }}</span>\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.events.inputs.max_photos')</h5>\n                    <span>{{ $event->max_photos ?? '-' }}</span>\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.events.inputs.max_users')</h5>\n                    <span>{{ $event->max_users ?? '-' }}</span>\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.events.inputs.expiration_date')</h5>\n                    <span>{{ $event->expiration_date ?? '-' }}</span>\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.events.inputs.user_id')</h5>\n                    <span>{{ optional($event->user)->name ?? '-' }}</span>\n                </div>\n            </div>\n\n            <div class=\"mt-4\">\n                <a href=\"{{ route('events.index') }}\" class=\"btn btn-light\">\n                    <i class=\"icon ion-md-return-left\"></i>\n                    @lang('crud.common.back')\n                </a>\n\n                @can('create', App\\Models\\Event::class)\n                <a href=\"{{ route('events.create') }}\" class=\"btn btn-light\">\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:12","path":"\\resources\\views\\app\\events\\show.blade.php"},"\\resources\\views\\app\\events\\index.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"searchbar mt-0 mb-4\">\n        <div class=\"row\">\n            <div class=\"col-md-6\">\n                <form>\n                    <div class=\"input-group\">\n                        <input\n                            id=\"indexSearch\"\n                            type=\"text\"\n                            name=\"search\"\n                            placeholder=\"{{ __('crud.common.search') }}\"\n                            value=\"{{ $search ?? '' }}\"\n                            class=\"form-control\"\n                            autocomplete=\"off\"\n                        />\n                        <div class=\"input-group-append\">\n                            <button type=\"submit\" class=\"btn btn-primary\">\n                                <i class=\"icon ion-md-search\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n            <div class=\"col-md-6 text-right\">\n                @can('create', App\\Models\\Event::class)\n                <a href=\"{{ route('events.create') }}\" class=\"btn btn-primary\">\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <div style=\"display: flex; justify-content: space-between;\">\n                <h4 class=\"card-title\">@lang('crud.events.index_title')</h4>\n            </div>\n\n            <div class=\"table-responsive\">\n                <table class=\"table table-borderless table-hover\">\n                    <thead>\n                        <tr>\n                            <th class=\"text-left\">\n                                @lang('crud.events.inputs.gallery_name')\n                            </th>\n                            <th class=\"text-right\">\n                                @lang('crud.events.inputs.max_photos')\n                            </th>\n                            <th class=\"text-right\">\n                                @lang('crud.events.inputs.max_users')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.events.inputs.expiration_date')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.events.inputs.user_id')\n                            </th>\n                            <th class=\"text-center\">\n                                @lang('crud.common.actions')\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        @forelse($events as $event)\n                        <tr>\n                            <td>{{ $event->gallery_name ?? '-' }}</td>\n                            <td>{{ $event->max_photos ?? '-' }}</td>\n                            <td>{{ $event->max_users ?? '-' }}</td>\n                            <td>{{ $event->expiration_date ?? '-' }}</td>\n                            <td>{{ optional($event->user)->name ?? '-' }}</td>\n                            <td class=\"text-center\" style=\"width: 134px;\">\n                                <div\n                                    role=\"group\"\n                                    aria-label=\"Row Actions\"\n                                    class=\"btn-group\"\n                                >\n                                    @can('update', $event)\n                                    <a\n                                        href=\"{{ route('events.edit', $event) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-create\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('view', $event)\n                                    <a\n                                        href=\"{{ route('events.show', $event) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-eye\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('delete', $event)\n                                    <form\n                                        action=\"{{ route('events.destroy', $event) }}\"\n                                        method=\"POST\"\n                                        onsubmit=\"return confirm('{{ __('crud.common.are_you_sure') }}')\"\n                                    >\n                                        @csrf @method('DELETE')\n                                        <button\n                                            type=\"submit\"\n                                            class=\"btn btn-light text-danger\"\n                                        >\n                                            <i class=\"icon ion-md-trash\"></i>\n                                        </button>\n                                    </form>\n                                    @endcan\n                                </div>\n                            </td>\n                        </tr>\n                        @empty\n                        <tr>\n                            <td colspan=\"6\">\n                                @lang('crud.common.no_items_found')\n                            </td>\n                        </tr>\n                        @endforelse\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <td colspan=\"6\">{!! $events->render() !!}</td>\n                        </tr>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:12","path":"\\resources\\views\\app\\events\\index.blade.php"},"\\app\\Http\\Controllers\\Api\\EventController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Event;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Response;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\EventResource;\nuse App\\Http\\Resources\\EventCollection;\nuse App\\Http\\Requests\\EventStoreRequest;\nuse App\\Http\\Requests\\EventUpdateRequest;\n\nclass EventController extends Controller\n{\n    public function index(Request $request): EventCollection\n    {\n        $this->authorize('view-any', Event::class);\n\n        $search = $request->get('search', '');\n\n        $events = Event::search($search)\n            ->latest()\n            ->paginate();\n\n        return new EventCollection($events);\n    }\n\n    public function store(EventStoreRequest $request): EventResource\n    {\n        $this->authorize('create', Event::class);\n\n        $validated = $request->validated();\n\n        $event = Event::create($validated);\n\n        return new EventResource($event);\n    }\n\n    public function show(Request $request, Event $event): EventResource\n    {\n        $this->authorize('view', $event);\n\n        return new EventResource($event);\n    }\n\n    public function update(\n        EventUpdateRequest $request,\n        Event $event\n    ): EventResource {\n        $this->authorize('update', $event);\n\n        $validated = $request->validated();\n\n        $event->update($validated);\n\n        return new EventResource($event);\n    }\n\n    public function destroy(Request $request, Event $event): Response\n    {\n        $this->authorize('delete', $event);\n\n        $event->delete();\n\n        return response()->noContent();\n    }\n}\n","module":"crud:12","path":"\\app\\Http\\Controllers\\Api\\EventController.php"},"\\tests\\Feature\\Api\\EventTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Event;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass EventTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_events_list(): void\n    {\n        $events = Event::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->getJson(route('api.events.index'));\n\n        $response->assertOk()->assertSee($events[0]->gallery_name);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_event(): void\n    {\n        $data = Event::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->postJson(route('api.events.store'), $data);\n\n        $this->assertDatabaseHas('events', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_event(): void\n    {\n        $event = Event::factory()->create();\n\n        $user = User::factory()->create();\n\n        $data = [\n            'gallery_name' => $this->faker->text(15),\n            'max_photos' => $this->faker->randomNumber(),\n            'max_users' => $this->faker->randomNumber(),\n            'expiration_date' => $this->faker->date(),\n            'user_id' => $user->id,\n        ];\n\n        $response = $this->putJson(route('api.events.update', $event), $data);\n\n        $data['id'] = $event->id;\n\n        $this->assertDatabaseHas('events', $data);\n\n        $response->assertOk()->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_event(): void\n    {\n        $event = Event::factory()->create();\n\n        $response = $this->deleteJson(route('api.events.destroy', $event));\n\n        $this->assertModelMissing($event);\n\n        $response->assertNoContent();\n    }\n}\n","module":"crud:12","path":"\\tests\\Feature\\Api\\EventTest.php"},"\\app\\Http\\Resources\\PhotoResource.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass PhotoResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     */\n    public function toArray(Request $request): array\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:15","path":"\\app\\Http\\Resources\\PhotoResource.php"},"\\app\\Http\\Resources\\PhotoCollection.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass PhotoCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     */\n    public function toArray(Request $request): array\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:15","path":"\\app\\Http\\Resources\\PhotoCollection.php"},"\\app\\Http\\Controllers\\Api\\EventPhotosController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Event;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\PhotoResource;\nuse App\\Http\\Resources\\PhotoCollection;\n\nclass EventPhotosController extends Controller\n{\n    public function index(Request $request, Event $event): PhotoCollection\n    {\n        $this->authorize('view', $event);\n\n        $search = $request->get('search', '');\n\n        $photos = $event\n            ->photos()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new PhotoCollection($photos);\n    }\n\n    public function store(Request $request, Event $event): PhotoResource\n    {\n        $this->authorize('create', Photo::class);\n\n        $validated = $request->validate([\n            'photo' => ['required', 'file'],\n        ]);\n\n        if ($request->hasFile('photo')) {\n            $validated['photo'] = $request->file('photo')->store('public');\n        }\n\n        $photo = $event->photos()->create($validated);\n\n        return new PhotoResource($photo);\n    }\n}\n","module":"crud:12","path":"\\app\\Http\\Controllers\\Api\\EventPhotosController.php"},"\\tests\\Feature\\Api\\EventPhotosTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Event;\nuse App\\Models\\Photo;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass EventPhotosTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_event_photos(): void\n    {\n        $event = Event::factory()->create();\n        $photos = Photo::factory()\n            ->count(2)\n            ->create([\n                'event_id' => $event->id,\n            ]);\n\n        $response = $this->getJson(route('api.events.photos.index', $event));\n\n        $response->assertOk()->assertSee($photos[0]->photo);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_event_photos(): void\n    {\n        $event = Event::factory()->create();\n        $data = Photo::factory()\n            ->make([\n                'event_id' => $event->id,\n            ])\n            ->toArray();\n\n        $response = $this->postJson(\n            route('api.events.photos.store', $event),\n            $data\n        );\n\n        $this->assertDatabaseHas('photos', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n\n        $photo = Photo::latest('id')->first();\n\n        $this->assertEquals($event->id, $photo->event_id);\n    }\n}\n","module":"crud:12","path":"\\tests\\Feature\\Api\\EventPhotosTest.php"},"\\app\\Http\\Resources\\InvitationResource.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass InvitationResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     */\n    public function toArray(Request $request): array\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:17","path":"\\app\\Http\\Resources\\InvitationResource.php"},"\\app\\Http\\Resources\\InvitationCollection.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass InvitationCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     */\n    public function toArray(Request $request): array\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:17","path":"\\app\\Http\\Resources\\InvitationCollection.php"},"\\app\\Http\\Controllers\\Api\\EventInvitationsController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Event;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\InvitationResource;\nuse App\\Http\\Resources\\InvitationCollection;\n\nclass EventInvitationsController extends Controller\n{\n    public function index(Request $request, Event $event): InvitationCollection\n    {\n        $this->authorize('view', $event);\n\n        $search = $request->get('search', '');\n\n        $invitations = $event\n            ->invitations()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new InvitationCollection($invitations);\n    }\n\n    public function store(Request $request, Event $event): InvitationResource\n    {\n        $this->authorize('create', Invitation::class);\n\n        $validated = $request->validate([\n            'email' => ['required', 'email'],\n        ]);\n\n        $invitation = $event->invitations()->create($validated);\n\n        return new InvitationResource($invitation);\n    }\n}\n","module":"crud:12","path":"\\app\\Http\\Controllers\\Api\\EventInvitationsController.php"},"\\tests\\Feature\\Api\\EventInvitationsTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Event;\nuse App\\Models\\Invitation;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass EventInvitationsTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_event_invitations(): void\n    {\n        $event = Event::factory()->create();\n        $invitations = Invitation::factory()\n            ->count(2)\n            ->create([\n                'event_id' => $event->id,\n            ]);\n\n        $response = $this->getJson(\n            route('api.events.invitations.index', $event)\n        );\n\n        $response->assertOk()->assertSee($invitations[0]->email);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_event_invitations(): void\n    {\n        $event = Event::factory()->create();\n        $data = Invitation::factory()\n            ->make([\n                'event_id' => $event->id,\n            ])\n            ->toArray();\n\n        $response = $this->postJson(\n            route('api.events.invitations.store', $event),\n            $data\n        );\n\n        $this->assertDatabaseHas('invitations', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n\n        $invitation = Invitation::latest('id')->first();\n\n        $this->assertEquals($event->id, $invitation->event_id);\n    }\n}\n","module":"crud:12","path":"\\tests\\Feature\\Api\\EventInvitationsTest.php"},"\\app\\Http\\Requests\\PhotoStoreRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass PhotoStoreRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     */\n    public function rules(): array\n    {\n        return [\n            'event_id' => ['required', 'exists:events,id'],\n            'photo' => ['required', 'file'],\n        ];\n    }\n}\n","module":"crud:13","path":"\\app\\Http\\Requests\\PhotoStoreRequest.php"},"\\app\\Http\\Requests\\PhotoUpdateRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass PhotoUpdateRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     */\n    public function rules(): array\n    {\n        return [\n            'event_id' => ['required', 'exists:events,id'],\n            'photo' => ['file', 'nullable'],\n        ];\n    }\n}\n","module":"crud:13","path":"\\app\\Http\\Requests\\PhotoUpdateRequest.php"},"\\app\\Http\\Controllers\\PhotoController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Photo;\nuse App\\Models\\Event;\nuse Illuminate\\View\\View;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Support\\Facades\\Storage;\nuse App\\Http\\Requests\\PhotoStoreRequest;\nuse App\\Http\\Requests\\PhotoUpdateRequest;\n\nclass PhotoController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     */\n    public function index(Request $request): View\n    {\n        $this->authorize('view-any', Photo::class);\n\n        $search = $request->get('search', '');\n\n        $photos = Photo::search($search)\n            ->latest()\n            ->paginate(5)\n            ->withQueryString();\n\n        return view('app.photos.index', compact('photos', 'search'));\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     */\n    public function create(Request $request): View\n    {\n        $this->authorize('create', Photo::class);\n\n        $events = Event::pluck('gallery_name', 'id');\n\n        return view('app.photos.create', compact('events'));\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     */\n    public function store(PhotoStoreRequest $request): RedirectResponse\n    {\n        $this->authorize('create', Photo::class);\n\n        $validated = $request->validated();\n        if ($request->hasFile('photo')) {\n            $validated['photo'] = $request->file('photo')->store('public');\n        }\n\n        $photo = Photo::create($validated);\n\n        return redirect()\n            ->route('photos.edit', $photo)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n     * Display the specified resource.\n     */\n    public function show(Request $request, Photo $photo): View\n    {\n        $this->authorize('view', $photo);\n\n        return view('app.photos.show', compact('photo'));\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     */\n    public function edit(Request $request, Photo $photo): View\n    {\n        $this->authorize('update', $photo);\n\n        $events = Event::pluck('gallery_name', 'id');\n\n        return view('app.photos.edit', compact('photo', 'events'));\n    }\n\n    /**\n     * Update the specified resource in storage.\n     */\n    public function update(\n        PhotoUpdateRequest $request,\n        Photo $photo\n    ): RedirectResponse {\n        $this->authorize('update', $photo);\n\n        $validated = $request->validated();\n        if ($request->hasFile('photo')) {\n            if ($photo->photo) {\n                Storage::delete($photo->photo);\n            }\n\n            $validated['photo'] = $request->file('photo')->store('public');\n        }\n\n        $photo->update($validated);\n\n        return redirect()\n            ->route('photos.edit', $photo)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     */\n    public function destroy(Request $request, Photo $photo): RedirectResponse\n    {\n        $this->authorize('delete', $photo);\n\n        if ($photo->photo) {\n            Storage::delete($photo->photo);\n        }\n\n        $photo->delete();\n\n        return redirect()\n            ->route('photos.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}\n","module":"crud:13","path":"\\app\\Http\\Controllers\\PhotoController.php"},"\\tests\\Feature\\Controllers\\PhotoControllerTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Models\\Photo;\n\nuse App\\Models\\Event;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass PhotoControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(\n            User::factory()->create(['email' => 'admin@admin.com'])\n        );\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_photos(): void\n    {\n        $photos = Photo::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->get(route('photos.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.photos.index')\n            ->assertViewHas('photos');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_photo(): void\n    {\n        $response = $this->get(route('photos.create'));\n\n        $response->assertOk()->assertViewIs('app.photos.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_photo(): void\n    {\n        $data = Photo::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->post(route('photos.store'), $data);\n\n        $this->assertDatabaseHas('photos', $data);\n\n        $photo = Photo::latest('id')->first();\n\n        $response->assertRedirect(route('photos.edit', $photo));\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_photo(): void\n    {\n        $photo = Photo::factory()->create();\n\n        $response = $this->get(route('photos.show', $photo));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.photos.show')\n            ->assertViewHas('photo');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_photo(): void\n    {\n        $photo = Photo::factory()->create();\n\n        $response = $this->get(route('photos.edit', $photo));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.photos.edit')\n            ->assertViewHas('photo');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_photo(): void\n    {\n        $photo = Photo::factory()->create();\n\n        $event = Event::factory()->create();\n\n        $data = [\n            'photo' => $this->faker->text(10),\n            'event_id' => $event->id,\n        ];\n\n        $response = $this->put(route('photos.update', $photo), $data);\n\n        $data['id'] = $photo->id;\n\n        $this->assertDatabaseHas('photos', $data);\n\n        $response->assertRedirect(route('photos.edit', $photo));\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_photo(): void\n    {\n        $photo = Photo::factory()->create();\n\n        $response = $this->delete(route('photos.destroy', $photo));\n\n        $response->assertRedirect(route('photos.index'));\n\n        $this->assertModelMissing($photo);\n    }\n}\n","module":"crud:13","path":"\\tests\\Feature\\Controllers\\PhotoControllerTest.php"},"\\resources\\views\\app\\photos\\create.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\r\n\r\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('photos.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.photos.create_title')\n            </h4>\n\n            <x-form\n                method=\"POST\"\n                action=\"{{ route('photos.store') }}\"\n                has-files\n                class=\"mt-4\"\n            >\n                @include('app.photos.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a href=\"{{ route('photos.index') }}\" class=\"btn btn-light\">\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.create')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:13","path":"\\resources\\views\\app\\photos\\create.blade.php"},"\\resources\\views\\app\\photos\\edit.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\r\n\r\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('photos.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.photos.edit_title')\n            </h4>\n\n            <x-form\n                method=\"PUT\"\n                action=\"{{ route('photos.update', $photo) }}\"\n                has-files\n                class=\"mt-4\"\n            >\n                @include('app.photos.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a href=\"{{ route('photos.index') }}\" class=\"btn btn-light\">\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <a\n                        href=\"{{ route('photos.create') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-add text-primary\"></i>\n                        @lang('crud.common.create')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.update')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:13","path":"\\resources\\views\\app\\photos\\edit.blade.php"},"\\resources\\views\\app\\photos\\form-inputs.blade.php":{"deleteOnGeneration":true,"content":"@php $editing = isset($photo) @endphp\n\n<div class=\"row\">\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.select name=\"event_id\" label=\"Event\" required>\n            @php $selected = old('event_id', ($editing ? $photo->event_id : '')) @endphp\n            <option disabled {{ empty($selected) ? 'selected' : '' }}>Please select the Event</option>\n            @foreach($events as $value => $label)\n            <option value=\"{{ $value }}\" {{ $selected == $value ? 'selected' : '' }} >{{ $label }}</option>\n            @endforeach\n        </x-inputs.select>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <div\n            x-data=\"imageViewer('{{ $editing && $photo->photo ? \\Storage::url($photo->photo) : '' }}')\"\n        >\n            <x-inputs.partials.label\n                name=\"photo\"\n                label=\"Photo\"\n            ></x-inputs.partials.label\n            ><br />\n\n            <!-- Show the image -->\n            <template x-if=\"imageUrl\">\n                <img\n                    :src=\"imageUrl\"\n                    class=\"object-cover rounded border border-gray-200\"\n                    style=\"width: 100px; height: 100px;\"\n                />\n            </template>\n\n            <!-- Show the gray box when image is not available -->\n            <template x-if=\"!imageUrl\">\n                <div\n                    class=\"border rounded border-gray-200 bg-gray-100\"\n                    style=\"width: 100px; height: 100px;\"\n                ></div>\n            </template>\n\n            <div class=\"mt-2\">\n                <input\n                    type=\"file\"\n                    name=\"photo\"\n                    id=\"photo\"\n                    @change=\"fileChosen\"\n                />\n            </div>\n\n            @error('photo') @include('components.inputs.partials.error')\n            @enderror\n        </div>\n    </x-inputs.group>\n</div>\n","module":"crud:13","path":"\\resources\\views\\app\\photos\\form-inputs.blade.php"},"\\resources\\views\\app\\photos\\show.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\r\n\r\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('photos.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.photos.show_title')\n            </h4>\n\n            <div class=\"mt-4\">\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.photos.inputs.event_id')</h5>\n                    <span\n                        >{{ optional($photo->event)->gallery_name ?? '-'\n                        }}</span\n                    >\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.photos.inputs.photo')</h5>\n                    <x-partials.thumbnail\n                        src=\"{{ $photo->photo ? \\Storage::url($photo->photo) : '' }}\"\n                        size=\"150\"\n                    />\n                </div>\n            </div>\n\n            <div class=\"mt-4\">\n                <a href=\"{{ route('photos.index') }}\" class=\"btn btn-light\">\n                    <i class=\"icon ion-md-return-left\"></i>\n                    @lang('crud.common.back')\n                </a>\n\n                @can('create', App\\Models\\Photo::class)\n                <a href=\"{{ route('photos.create') }}\" class=\"btn btn-light\">\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:13","path":"\\resources\\views\\app\\photos\\show.blade.php"},"\\resources\\views\\app\\photos\\index.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"searchbar mt-0 mb-4\">\n        <div class=\"row\">\n            <div class=\"col-md-6\">\n                <form>\n                    <div class=\"input-group\">\n                        <input\n                            id=\"indexSearch\"\n                            type=\"text\"\n                            name=\"search\"\n                            placeholder=\"{{ __('crud.common.search') }}\"\n                            value=\"{{ $search ?? '' }}\"\n                            class=\"form-control\"\n                            autocomplete=\"off\"\n                        />\n                        <div class=\"input-group-append\">\n                            <button type=\"submit\" class=\"btn btn-primary\">\n                                <i class=\"icon ion-md-search\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n            <div class=\"col-md-6 text-right\">\n                @can('create', App\\Models\\Photo::class)\n                <a href=\"{{ route('photos.create') }}\" class=\"btn btn-primary\">\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <div style=\"display: flex; justify-content: space-between;\">\n                <h4 class=\"card-title\">@lang('crud.photos.index_title')</h4>\n            </div>\n\n            <div class=\"table-responsive\">\n                <table class=\"table table-borderless table-hover\">\n                    <thead>\n                        <tr>\n                            <th class=\"text-left\">\n                                @lang('crud.photos.inputs.event_id')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.photos.inputs.photo')\n                            </th>\n                            <th class=\"text-center\">\n                                @lang('crud.common.actions')\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        @forelse($photos as $photo)\n                        <tr>\n                            <td>\n                                {{ optional($photo->event)->gallery_name ?? '-'\n                                }}\n                            </td>\n                            <td>\n                                <x-partials.thumbnail\n                                    src=\"{{ $photo->photo ? \\Storage::url($photo->photo) : '' }}\"\n                                />\n                            </td>\n                            <td class=\"text-center\" style=\"width: 134px;\">\n                                <div\n                                    role=\"group\"\n                                    aria-label=\"Row Actions\"\n                                    class=\"btn-group\"\n                                >\n                                    @can('update', $photo)\n                                    <a\n                                        href=\"{{ route('photos.edit', $photo) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-create\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('view', $photo)\n                                    <a\n                                        href=\"{{ route('photos.show', $photo) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-eye\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('delete', $photo)\n                                    <form\n                                        action=\"{{ route('photos.destroy', $photo) }}\"\n                                        method=\"POST\"\n                                        onsubmit=\"return confirm('{{ __('crud.common.are_you_sure') }}')\"\n                                    >\n                                        @csrf @method('DELETE')\n                                        <button\n                                            type=\"submit\"\n                                            class=\"btn btn-light text-danger\"\n                                        >\n                                            <i class=\"icon ion-md-trash\"></i>\n                                        </button>\n                                    </form>\n                                    @endcan\n                                </div>\n                            </td>\n                        </tr>\n                        @empty\n                        <tr>\n                            <td colspan=\"3\">\n                                @lang('crud.common.no_items_found')\n                            </td>\n                        </tr>\n                        @endforelse\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <td colspan=\"3\">{!! $photos->render() !!}</td>\n                        </tr>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:13","path":"\\resources\\views\\app\\photos\\index.blade.php"},"\\app\\Http\\Requests\\InvitationStoreRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass InvitationStoreRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     */\n    public function rules(): array\n    {\n        return [\n            'email' => ['required', 'email'],\n            'event_id' => ['required', 'exists:events,id'],\n        ];\n    }\n}\n","module":"crud:14","path":"\\app\\Http\\Requests\\InvitationStoreRequest.php"},"\\app\\Http\\Requests\\InvitationUpdateRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass InvitationUpdateRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     */\n    public function rules(): array\n    {\n        return [\n            'email' => ['required', 'email'],\n            'event_id' => ['required', 'exists:events,id'],\n        ];\n    }\n}\n","module":"crud:14","path":"\\app\\Http\\Requests\\InvitationUpdateRequest.php"},"\\app\\Http\\Controllers\\InvitationController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Event;\nuse Illuminate\\View\\View;\nuse App\\Models\\Invitation;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\RedirectResponse;\nuse App\\Http\\Requests\\InvitationStoreRequest;\nuse App\\Http\\Requests\\InvitationUpdateRequest;\n\nclass InvitationController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     */\n    public function index(Request $request): View\n    {\n        $this->authorize('view-any', Invitation::class);\n\n        $search = $request->get('search', '');\n\n        $invitations = Invitation::search($search)\n            ->latest()\n            ->paginate(5)\n            ->withQueryString();\n\n        return view('app.invitations.index', compact('invitations', 'search'));\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     */\n    public function create(Request $request): View\n    {\n        $this->authorize('create', Invitation::class);\n\n        $events = Event::pluck('gallery_name', 'id');\n\n        return view('app.invitations.create', compact('events'));\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     */\n    public function store(InvitationStoreRequest $request): RedirectResponse\n    {\n        $this->authorize('create', Invitation::class);\n\n        $validated = $request->validated();\n\n        $invitation = Invitation::create($validated);\n\n        return redirect()\n            ->route('invitations.edit', $invitation)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n     * Display the specified resource.\n     */\n    public function show(Request $request, Invitation $invitation): View\n    {\n        $this->authorize('view', $invitation);\n\n        return view('app.invitations.show', compact('invitation'));\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     */\n    public function edit(Request $request, Invitation $invitation): View\n    {\n        $this->authorize('update', $invitation);\n\n        $events = Event::pluck('gallery_name', 'id');\n\n        return view('app.invitations.edit', compact('invitation', 'events'));\n    }\n\n    /**\n     * Update the specified resource in storage.\n     */\n    public function update(\n        InvitationUpdateRequest $request,\n        Invitation $invitation\n    ): RedirectResponse {\n        $this->authorize('update', $invitation);\n\n        $validated = $request->validated();\n\n        $invitation->update($validated);\n\n        return redirect()\n            ->route('invitations.edit', $invitation)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     */\n    public function destroy(\n        Request $request,\n        Invitation $invitation\n    ): RedirectResponse {\n        $this->authorize('delete', $invitation);\n\n        $invitation->delete();\n\n        return redirect()\n            ->route('invitations.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}\n","module":"crud:14","path":"\\app\\Http\\Controllers\\InvitationController.php"},"\\tests\\Feature\\Controllers\\InvitationControllerTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Models\\Invitation;\n\nuse App\\Models\\Event;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass InvitationControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(\n            User::factory()->create(['email' => 'admin@admin.com'])\n        );\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_invitations(): void\n    {\n        $invitations = Invitation::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->get(route('invitations.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.invitations.index')\n            ->assertViewHas('invitations');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_invitation(): void\n    {\n        $response = $this->get(route('invitations.create'));\n\n        $response->assertOk()->assertViewIs('app.invitations.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_invitation(): void\n    {\n        $data = Invitation::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->post(route('invitations.store'), $data);\n\n        $this->assertDatabaseHas('invitations', $data);\n\n        $invitation = Invitation::latest('id')->first();\n\n        $response->assertRedirect(route('invitations.edit', $invitation));\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_invitation(): void\n    {\n        $invitation = Invitation::factory()->create();\n\n        $response = $this->get(route('invitations.show', $invitation));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.invitations.show')\n            ->assertViewHas('invitation');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_invitation(): void\n    {\n        $invitation = Invitation::factory()->create();\n\n        $response = $this->get(route('invitations.edit', $invitation));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.invitations.edit')\n            ->assertViewHas('invitation');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_invitation(): void\n    {\n        $invitation = Invitation::factory()->create();\n\n        $event = Event::factory()->create();\n\n        $data = [\n            'email' => $this->faker->email(),\n            'event_id' => $event->id,\n        ];\n\n        $response = $this->put(route('invitations.update', $invitation), $data);\n\n        $data['id'] = $invitation->id;\n\n        $this->assertDatabaseHas('invitations', $data);\n\n        $response->assertRedirect(route('invitations.edit', $invitation));\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_invitation(): void\n    {\n        $invitation = Invitation::factory()->create();\n\n        $response = $this->delete(route('invitations.destroy', $invitation));\n\n        $response->assertRedirect(route('invitations.index'));\n\n        $this->assertModelMissing($invitation);\n    }\n}\n","module":"crud:14","path":"\\tests\\Feature\\Controllers\\InvitationControllerTest.php"},"\\resources\\views\\app\\invitations\\create.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\r\n\r\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('invitations.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.invitations.create_title')\n            </h4>\n\n            <x-form\n                method=\"POST\"\n                action=\"{{ route('invitations.store') }}\"\n                class=\"mt-4\"\n            >\n                @include('app.invitations.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a\n                        href=\"{{ route('invitations.index') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.create')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:14","path":"\\resources\\views\\app\\invitations\\create.blade.php"},"\\resources\\views\\app\\invitations\\edit.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\r\n\r\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('invitations.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.invitations.edit_title')\n            </h4>\n\n            <x-form\n                method=\"PUT\"\n                action=\"{{ route('invitations.update', $invitation) }}\"\n                class=\"mt-4\"\n            >\n                @include('app.invitations.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a\n                        href=\"{{ route('invitations.index') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <a\n                        href=\"{{ route('invitations.create') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-add text-primary\"></i>\n                        @lang('crud.common.create')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.update')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:14","path":"\\resources\\views\\app\\invitations\\edit.blade.php"},"\\resources\\views\\app\\invitations\\form-inputs.blade.php":{"deleteOnGeneration":true,"content":"@php $editing = isset($invitation) @endphp\n\n<div class=\"row\">\n    <x-inputs.group class=\"col-sm-12 col-lg-6\">\n        <x-inputs.email\n            name=\"email\"\n            label=\"Email\"\n            :value=\"old('email', ($editing ? $invitation->email : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Email\"\n            required\n        ></x-inputs.email>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12 col-lg-6\">\n        <x-inputs.select name=\"event_id\" label=\"Event\" required>\n            @php $selected = old('event_id', ($editing ? $invitation->event_id : '')) @endphp\n            <option disabled {{ empty($selected) ? 'selected' : '' }}>Please select the Event</option>\n            @foreach($events as $value => $label)\n            <option value=\"{{ $value }}\" {{ $selected == $value ? 'selected' : '' }} >{{ $label }}</option>\n            @endforeach\n        </x-inputs.select>\n    </x-inputs.group>\n</div>\n","module":"crud:14","path":"\\resources\\views\\app\\invitations\\form-inputs.blade.php"},"\\resources\\views\\app\\invitations\\show.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\r\n\r\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('invitations.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.invitations.show_title')\n            </h4>\n\n            <div class=\"mt-4\">\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.invitations.inputs.email')</h5>\n                    <span>{{ $invitation->email ?? '-' }}</span>\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.invitations.inputs.event_id')</h5>\n                    <span\n                        >{{ optional($invitation->event)->gallery_name ?? '-'\n                        }}</span\n                    >\n                </div>\n            </div>\n\n            <div class=\"mt-4\">\n                <a\n                    href=\"{{ route('invitations.index') }}\"\n                    class=\"btn btn-light\"\n                >\n                    <i class=\"icon ion-md-return-left\"></i>\n                    @lang('crud.common.back')\n                </a>\n\n                @can('create', App\\Models\\Invitation::class)\n                <a\n                    href=\"{{ route('invitations.create') }}\"\n                    class=\"btn btn-light\"\n                >\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:14","path":"\\resources\\views\\app\\invitations\\show.blade.php"},"\\resources\\views\\app\\invitations\\index.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"searchbar mt-0 mb-4\">\n        <div class=\"row\">\n            <div class=\"col-md-6\">\n                <form>\n                    <div class=\"input-group\">\n                        <input\n                            id=\"indexSearch\"\n                            type=\"text\"\n                            name=\"search\"\n                            placeholder=\"{{ __('crud.common.search') }}\"\n                            value=\"{{ $search ?? '' }}\"\n                            class=\"form-control\"\n                            autocomplete=\"off\"\n                        />\n                        <div class=\"input-group-append\">\n                            <button type=\"submit\" class=\"btn btn-primary\">\n                                <i class=\"icon ion-md-search\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n            <div class=\"col-md-6 text-right\">\n                @can('create', App\\Models\\Invitation::class)\n                <a\n                    href=\"{{ route('invitations.create') }}\"\n                    class=\"btn btn-primary\"\n                >\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <div style=\"display: flex; justify-content: space-between;\">\n                <h4 class=\"card-title\">\n                    @lang('crud.invitations.index_title')\n                </h4>\n            </div>\n\n            <div class=\"table-responsive\">\n                <table class=\"table table-borderless table-hover\">\n                    <thead>\n                        <tr>\n                            <th class=\"text-left\">\n                                @lang('crud.invitations.inputs.email')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.invitations.inputs.event_id')\n                            </th>\n                            <th class=\"text-center\">\n                                @lang('crud.common.actions')\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        @forelse($invitations as $invitation)\n                        <tr>\n                            <td>{{ $invitation->email ?? '-' }}</td>\n                            <td>\n                                {{ optional($invitation->event)->gallery_name ??\n                                '-' }}\n                            </td>\n                            <td class=\"text-center\" style=\"width: 134px;\">\n                                <div\n                                    role=\"group\"\n                                    aria-label=\"Row Actions\"\n                                    class=\"btn-group\"\n                                >\n                                    @can('update', $invitation)\n                                    <a\n                                        href=\"{{ route('invitations.edit', $invitation) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-create\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('view', $invitation)\n                                    <a\n                                        href=\"{{ route('invitations.show', $invitation) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-eye\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('delete', $invitation)\n                                    <form\n                                        action=\"{{ route('invitations.destroy', $invitation) }}\"\n                                        method=\"POST\"\n                                        onsubmit=\"return confirm('{{ __('crud.common.are_you_sure') }}')\"\n                                    >\n                                        @csrf @method('DELETE')\n                                        <button\n                                            type=\"submit\"\n                                            class=\"btn btn-light text-danger\"\n                                        >\n                                            <i class=\"icon ion-md-trash\"></i>\n                                        </button>\n                                    </form>\n                                    @endcan\n                                </div>\n                            </td>\n                        </tr>\n                        @empty\n                        <tr>\n                            <td colspan=\"3\">\n                                @lang('crud.common.no_items_found')\n                            </td>\n                        </tr>\n                        @endforelse\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <td colspan=\"3\">{!! $invitations->render() !!}</td>\n                        </tr>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:14","path":"\\resources\\views\\app\\invitations\\index.blade.php"},"\\app\\Http\\Requests\\CommentStoreRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass CommentStoreRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     */\n    public function rules(): array\n    {\n        return [\n            'photo_id' => ['required', 'exists:photos,id'],\n            'comment' => ['required', 'max:255', 'string'],\n        ];\n    }\n}\n","module":"crud:15","path":"\\app\\Http\\Requests\\CommentStoreRequest.php"},"\\app\\Http\\Requests\\CommentUpdateRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass CommentUpdateRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     */\n    public function rules(): array\n    {\n        return [\n            'photo_id' => ['required', 'exists:photos,id'],\n            'comment' => ['required', 'max:255', 'string'],\n        ];\n    }\n}\n","module":"crud:15","path":"\\app\\Http\\Requests\\CommentUpdateRequest.php"},"\\app\\Http\\Controllers\\CommentController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Photo;\nuse App\\Models\\Comment;\nuse Illuminate\\View\\View;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\RedirectResponse;\nuse App\\Http\\Requests\\CommentStoreRequest;\nuse App\\Http\\Requests\\CommentUpdateRequest;\n\nclass CommentController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     */\n    public function index(Request $request): View\n    {\n        $this->authorize('view-any', Comment::class);\n\n        $search = $request->get('search', '');\n\n        $comments = Comment::search($search)\n            ->latest()\n            ->paginate(5)\n            ->withQueryString();\n\n        return view('app.comments.index', compact('comments', 'search'));\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     */\n    public function create(Request $request): View\n    {\n        $this->authorize('create', Comment::class);\n\n        $photos = Photo::pluck('photo', 'id');\n\n        return view('app.comments.create', compact('photos'));\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     */\n    public function store(CommentStoreRequest $request): RedirectResponse\n    {\n        $this->authorize('create', Comment::class);\n\n        $validated = $request->validated();\n\n        $comment = Comment::create($validated);\n\n        return redirect()\n            ->route('comments.edit', $comment)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n     * Display the specified resource.\n     */\n    public function show(Request $request, Comment $comment): View\n    {\n        $this->authorize('view', $comment);\n\n        return view('app.comments.show', compact('comment'));\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     */\n    public function edit(Request $request, Comment $comment): View\n    {\n        $this->authorize('update', $comment);\n\n        $photos = Photo::pluck('photo', 'id');\n\n        return view('app.comments.edit', compact('comment', 'photos'));\n    }\n\n    /**\n     * Update the specified resource in storage.\n     */\n    public function update(\n        CommentUpdateRequest $request,\n        Comment $comment\n    ): RedirectResponse {\n        $this->authorize('update', $comment);\n\n        $validated = $request->validated();\n\n        $comment->update($validated);\n\n        return redirect()\n            ->route('comments.edit', $comment)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     */\n    public function destroy(\n        Request $request,\n        Comment $comment\n    ): RedirectResponse {\n        $this->authorize('delete', $comment);\n\n        $comment->delete();\n\n        return redirect()\n            ->route('comments.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}\n","module":"crud:15","path":"\\app\\Http\\Controllers\\CommentController.php"},"\\tests\\Feature\\Controllers\\CommentControllerTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Models\\Comment;\n\nuse App\\Models\\Photo;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass CommentControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(\n            User::factory()->create(['email' => 'admin@admin.com'])\n        );\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_comments(): void\n    {\n        $comments = Comment::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->get(route('comments.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.comments.index')\n            ->assertViewHas('comments');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_comment(): void\n    {\n        $response = $this->get(route('comments.create'));\n\n        $response->assertOk()->assertViewIs('app.comments.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_comment(): void\n    {\n        $data = Comment::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->post(route('comments.store'), $data);\n\n        $this->assertDatabaseHas('comments', $data);\n\n        $comment = Comment::latest('id')->first();\n\n        $response->assertRedirect(route('comments.edit', $comment));\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_comment(): void\n    {\n        $comment = Comment::factory()->create();\n\n        $response = $this->get(route('comments.show', $comment));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.comments.show')\n            ->assertViewHas('comment');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_comment(): void\n    {\n        $comment = Comment::factory()->create();\n\n        $response = $this->get(route('comments.edit', $comment));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.comments.edit')\n            ->assertViewHas('comment');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_comment(): void\n    {\n        $comment = Comment::factory()->create();\n\n        $photo = Photo::factory()->create();\n\n        $data = [\n            'comment' => $this->faker->text(),\n            'photo_id' => $photo->id,\n        ];\n\n        $response = $this->put(route('comments.update', $comment), $data);\n\n        $data['id'] = $comment->id;\n\n        $this->assertDatabaseHas('comments', $data);\n\n        $response->assertRedirect(route('comments.edit', $comment));\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_comment(): void\n    {\n        $comment = Comment::factory()->create();\n\n        $response = $this->delete(route('comments.destroy', $comment));\n\n        $response->assertRedirect(route('comments.index'));\n\n        $this->assertModelMissing($comment);\n    }\n}\n","module":"crud:15","path":"\\tests\\Feature\\Controllers\\CommentControllerTest.php"},"\\resources\\views\\app\\comments\\create.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\r\n\r\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('comments.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.comments.create_title')\n            </h4>\n\n            <x-form\n                method=\"POST\"\n                action=\"{{ route('comments.store') }}\"\n                class=\"mt-4\"\n            >\n                @include('app.comments.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a\n                        href=\"{{ route('comments.index') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.create')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:15","path":"\\resources\\views\\app\\comments\\create.blade.php"},"\\resources\\views\\app\\comments\\edit.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\r\n\r\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('comments.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.comments.edit_title')\n            </h4>\n\n            <x-form\n                method=\"PUT\"\n                action=\"{{ route('comments.update', $comment) }}\"\n                class=\"mt-4\"\n            >\n                @include('app.comments.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a\n                        href=\"{{ route('comments.index') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <a\n                        href=\"{{ route('comments.create') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-add text-primary\"></i>\n                        @lang('crud.common.create')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.update')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:15","path":"\\resources\\views\\app\\comments\\edit.blade.php"},"\\resources\\views\\app\\comments\\form-inputs.blade.php":{"deleteOnGeneration":true,"content":"@php $editing = isset($comment) @endphp\n\n<div class=\"row\">\n    <x-inputs.group class=\"col-sm-12 col-lg-6\">\n        <x-inputs.select name=\"photo_id\" label=\"Photo\" required>\n            @php $selected = old('photo_id', ($editing ? $comment->photo_id : '')) @endphp\n            <option disabled {{ empty($selected) ? 'selected' : '' }}>Please select the Photo</option>\n            @foreach($photos as $value => $label)\n            <option value=\"{{ $value }}\" {{ $selected == $value ? 'selected' : '' }} >{{ $label }}</option>\n            @endforeach\n        </x-inputs.select>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.textarea\n            name=\"comment\"\n            label=\"Comment\"\n            maxlength=\"255\"\n            required\n            >{{ old('comment', ($editing ? $comment->comment : ''))\n            }}</x-inputs.textarea\n        >\n    </x-inputs.group>\n</div>\n","module":"crud:15","path":"\\resources\\views\\app\\comments\\form-inputs.blade.php"},"\\resources\\views\\app\\comments\\show.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\r\n\r\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('comments.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.comments.show_title')\n            </h4>\n\n            <div class=\"mt-4\">\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.comments.inputs.photo_id')</h5>\n                    <span>{{ optional($comment->photo)->photo ?? '-' }}</span>\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.comments.inputs.comment')</h5>\n                    <span>{{ $comment->comment ?? '-' }}</span>\n                </div>\n            </div>\n\n            <div class=\"mt-4\">\n                <a href=\"{{ route('comments.index') }}\" class=\"btn btn-light\">\n                    <i class=\"icon ion-md-return-left\"></i>\n                    @lang('crud.common.back')\n                </a>\n\n                @can('create', App\\Models\\Comment::class)\n                <a href=\"{{ route('comments.create') }}\" class=\"btn btn-light\">\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:15","path":"\\resources\\views\\app\\comments\\show.blade.php"},"\\resources\\views\\app\\comments\\index.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"searchbar mt-0 mb-4\">\n        <div class=\"row\">\n            <div class=\"col-md-6\">\n                <form>\n                    <div class=\"input-group\">\n                        <input\n                            id=\"indexSearch\"\n                            type=\"text\"\n                            name=\"search\"\n                            placeholder=\"{{ __('crud.common.search') }}\"\n                            value=\"{{ $search ?? '' }}\"\n                            class=\"form-control\"\n                            autocomplete=\"off\"\n                        />\n                        <div class=\"input-group-append\">\n                            <button type=\"submit\" class=\"btn btn-primary\">\n                                <i class=\"icon ion-md-search\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n            <div class=\"col-md-6 text-right\">\n                @can('create', App\\Models\\Comment::class)\n                <a\n                    href=\"{{ route('comments.create') }}\"\n                    class=\"btn btn-primary\"\n                >\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <div style=\"display: flex; justify-content: space-between;\">\n                <h4 class=\"card-title\">@lang('crud.comments.index_title')</h4>\n            </div>\n\n            <div class=\"table-responsive\">\n                <table class=\"table table-borderless table-hover\">\n                    <thead>\n                        <tr>\n                            <th class=\"text-left\">\n                                @lang('crud.comments.inputs.photo_id')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.comments.inputs.comment')\n                            </th>\n                            <th class=\"text-center\">\n                                @lang('crud.common.actions')\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        @forelse($comments as $comment)\n                        <tr>\n                            <td>\n                                {{ optional($comment->photo)->photo ?? '-' }}\n                            </td>\n                            <td>{{ $comment->comment ?? '-' }}</td>\n                            <td class=\"text-center\" style=\"width: 134px;\">\n                                <div\n                                    role=\"group\"\n                                    aria-label=\"Row Actions\"\n                                    class=\"btn-group\"\n                                >\n                                    @can('update', $comment)\n                                    <a\n                                        href=\"{{ route('comments.edit', $comment) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-create\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('view', $comment)\n                                    <a\n                                        href=\"{{ route('comments.show', $comment) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-eye\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('delete', $comment)\n                                    <form\n                                        action=\"{{ route('comments.destroy', $comment) }}\"\n                                        method=\"POST\"\n                                        onsubmit=\"return confirm('{{ __('crud.common.are_you_sure') }}')\"\n                                    >\n                                        @csrf @method('DELETE')\n                                        <button\n                                            type=\"submit\"\n                                            class=\"btn btn-light text-danger\"\n                                        >\n                                            <i class=\"icon ion-md-trash\"></i>\n                                        </button>\n                                    </form>\n                                    @endcan\n                                </div>\n                            </td>\n                        </tr>\n                        @empty\n                        <tr>\n                            <td colspan=\"3\">\n                                @lang('crud.common.no_items_found')\n                            </td>\n                        </tr>\n                        @endforelse\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <td colspan=\"3\">{!! $comments->render() !!}</td>\n                        </tr>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:15","path":"\\resources\\views\\app\\comments\\index.blade.php"},"\\app\\Http\\Controllers\\Api\\PhotoController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Photo;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Response;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\PhotoResource;\nuse App\\Http\\Resources\\PhotoCollection;\nuse Illuminate\\Support\\Facades\\Storage;\nuse App\\Http\\Requests\\PhotoStoreRequest;\nuse App\\Http\\Requests\\PhotoUpdateRequest;\n\nclass PhotoController extends Controller\n{\n    public function index(Request $request): PhotoCollection\n    {\n        $this->authorize('view-any', Photo::class);\n\n        $search = $request->get('search', '');\n\n        $photos = Photo::search($search)\n            ->latest()\n            ->paginate();\n\n        return new PhotoCollection($photos);\n    }\n\n    public function store(PhotoStoreRequest $request): PhotoResource\n    {\n        $this->authorize('create', Photo::class);\n\n        $validated = $request->validated();\n        if ($request->hasFile('photo')) {\n            $validated['photo'] = $request->file('photo')->store('public');\n        }\n\n        $photo = Photo::create($validated);\n\n        return new PhotoResource($photo);\n    }\n\n    public function show(Request $request, Photo $photo): PhotoResource\n    {\n        $this->authorize('view', $photo);\n\n        return new PhotoResource($photo);\n    }\n\n    public function update(\n        PhotoUpdateRequest $request,\n        Photo $photo\n    ): PhotoResource {\n        $this->authorize('update', $photo);\n\n        $validated = $request->validated();\n\n        if ($request->hasFile('photo')) {\n            if ($photo->photo) {\n                Storage::delete($photo->photo);\n            }\n\n            $validated['photo'] = $request->file('photo')->store('public');\n        }\n\n        $photo->update($validated);\n\n        return new PhotoResource($photo);\n    }\n\n    public function destroy(Request $request, Photo $photo): Response\n    {\n        $this->authorize('delete', $photo);\n\n        if ($photo->photo) {\n            Storage::delete($photo->photo);\n        }\n\n        $photo->delete();\n\n        return response()->noContent();\n    }\n}\n","module":"crud:13","path":"\\app\\Http\\Controllers\\Api\\PhotoController.php"},"\\tests\\Feature\\Api\\PhotoTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Photo;\n\nuse App\\Models\\Event;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass PhotoTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_photos_list(): void\n    {\n        $photos = Photo::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->getJson(route('api.photos.index'));\n\n        $response->assertOk()->assertSee($photos[0]->photo);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_photo(): void\n    {\n        $data = Photo::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->postJson(route('api.photos.store'), $data);\n\n        $this->assertDatabaseHas('photos', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_photo(): void\n    {\n        $photo = Photo::factory()->create();\n\n        $event = Event::factory()->create();\n\n        $data = [\n            'photo' => $this->faker->text(10),\n            'event_id' => $event->id,\n        ];\n\n        $response = $this->putJson(route('api.photos.update', $photo), $data);\n\n        $data['id'] = $photo->id;\n\n        $this->assertDatabaseHas('photos', $data);\n\n        $response->assertOk()->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_photo(): void\n    {\n        $photo = Photo::factory()->create();\n\n        $response = $this->deleteJson(route('api.photos.destroy', $photo));\n\n        $this->assertModelMissing($photo);\n\n        $response->assertNoContent();\n    }\n}\n","module":"crud:13","path":"\\tests\\Feature\\Api\\PhotoTest.php"},"\\app\\Http\\Resources\\CommentResource.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass CommentResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     */\n    public function toArray(Request $request): array\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:16","path":"\\app\\Http\\Resources\\CommentResource.php"},"\\app\\Http\\Resources\\CommentCollection.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass CommentCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     */\n    public function toArray(Request $request): array\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:16","path":"\\app\\Http\\Resources\\CommentCollection.php"},"\\app\\Http\\Controllers\\Api\\PhotoCommentsController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Photo;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\CommentResource;\nuse App\\Http\\Resources\\CommentCollection;\n\nclass PhotoCommentsController extends Controller\n{\n    public function index(Request $request, Photo $photo): CommentCollection\n    {\n        $this->authorize('view', $photo);\n\n        $search = $request->get('search', '');\n\n        $comments = $photo\n            ->comments()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new CommentCollection($comments);\n    }\n\n    public function store(Request $request, Photo $photo): CommentResource\n    {\n        $this->authorize('create', Comment::class);\n\n        $validated = $request->validate([\n            'comment' => ['required', 'max:255', 'string'],\n        ]);\n\n        $comment = $photo->comments()->create($validated);\n\n        return new CommentResource($comment);\n    }\n}\n","module":"crud:13","path":"\\app\\Http\\Controllers\\Api\\PhotoCommentsController.php"},"\\tests\\Feature\\Api\\PhotoCommentsTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Photo;\nuse App\\Models\\Comment;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass PhotoCommentsTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_photo_comments(): void\n    {\n        $photo = Photo::factory()->create();\n        $comments = Comment::factory()\n            ->count(2)\n            ->create([\n                'photo_id' => $photo->id,\n            ]);\n\n        $response = $this->getJson(route('api.photos.comments.index', $photo));\n\n        $response->assertOk()->assertSee($comments[0]->comment);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_photo_comments(): void\n    {\n        $photo = Photo::factory()->create();\n        $data = Comment::factory()\n            ->make([\n                'photo_id' => $photo->id,\n            ])\n            ->toArray();\n\n        $response = $this->postJson(\n            route('api.photos.comments.store', $photo),\n            $data\n        );\n\n        $this->assertDatabaseHas('comments', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n\n        $comment = Comment::latest('id')->first();\n\n        $this->assertEquals($photo->id, $comment->photo_id);\n    }\n}\n","module":"crud:13","path":"\\tests\\Feature\\Api\\PhotoCommentsTest.php"},"\\app\\Http\\Controllers\\Api\\InvitationController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Invitation;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Response;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\InvitationResource;\nuse App\\Http\\Resources\\InvitationCollection;\nuse App\\Http\\Requests\\InvitationStoreRequest;\nuse App\\Http\\Requests\\InvitationUpdateRequest;\n\nclass InvitationController extends Controller\n{\n    public function index(Request $request): InvitationCollection\n    {\n        $this->authorize('view-any', Invitation::class);\n\n        $search = $request->get('search', '');\n\n        $invitations = Invitation::search($search)\n            ->latest()\n            ->paginate();\n\n        return new InvitationCollection($invitations);\n    }\n\n    public function store(InvitationStoreRequest $request): InvitationResource\n    {\n        $this->authorize('create', Invitation::class);\n\n        $validated = $request->validated();\n\n        $invitation = Invitation::create($validated);\n\n        return new InvitationResource($invitation);\n    }\n\n    public function show(\n        Request $request,\n        Invitation $invitation\n    ): InvitationResource {\n        $this->authorize('view', $invitation);\n\n        return new InvitationResource($invitation);\n    }\n\n    public function update(\n        InvitationUpdateRequest $request,\n        Invitation $invitation\n    ): InvitationResource {\n        $this->authorize('update', $invitation);\n\n        $validated = $request->validated();\n\n        $invitation->update($validated);\n\n        return new InvitationResource($invitation);\n    }\n\n    public function destroy(Request $request, Invitation $invitation): Response\n    {\n        $this->authorize('delete', $invitation);\n\n        $invitation->delete();\n\n        return response()->noContent();\n    }\n}\n","module":"crud:14","path":"\\app\\Http\\Controllers\\Api\\InvitationController.php"},"\\tests\\Feature\\Api\\InvitationTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Invitation;\n\nuse App\\Models\\Event;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass InvitationTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_invitations_list(): void\n    {\n        $invitations = Invitation::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->getJson(route('api.invitations.index'));\n\n        $response->assertOk()->assertSee($invitations[0]->email);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_invitation(): void\n    {\n        $data = Invitation::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->postJson(route('api.invitations.store'), $data);\n\n        $this->assertDatabaseHas('invitations', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_invitation(): void\n    {\n        $invitation = Invitation::factory()->create();\n\n        $event = Event::factory()->create();\n\n        $data = [\n            'email' => $this->faker->email(),\n            'event_id' => $event->id,\n        ];\n\n        $response = $this->putJson(\n            route('api.invitations.update', $invitation),\n            $data\n        );\n\n        $data['id'] = $invitation->id;\n\n        $this->assertDatabaseHas('invitations', $data);\n\n        $response->assertOk()->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_invitation(): void\n    {\n        $invitation = Invitation::factory()->create();\n\n        $response = $this->deleteJson(\n            route('api.invitations.destroy', $invitation)\n        );\n\n        $this->assertModelMissing($invitation);\n\n        $response->assertNoContent();\n    }\n}\n","module":"crud:14","path":"\\tests\\Feature\\Api\\InvitationTest.php"},"\\app\\Http\\Controllers\\Api\\CommentController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Comment;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Response;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\CommentResource;\nuse App\\Http\\Resources\\CommentCollection;\nuse App\\Http\\Requests\\CommentStoreRequest;\nuse App\\Http\\Requests\\CommentUpdateRequest;\n\nclass CommentController extends Controller\n{\n    public function index(Request $request): CommentCollection\n    {\n        $this->authorize('view-any', Comment::class);\n\n        $search = $request->get('search', '');\n\n        $comments = Comment::search($search)\n            ->latest()\n            ->paginate();\n\n        return new CommentCollection($comments);\n    }\n\n    public function store(CommentStoreRequest $request): CommentResource\n    {\n        $this->authorize('create', Comment::class);\n\n        $validated = $request->validated();\n\n        $comment = Comment::create($validated);\n\n        return new CommentResource($comment);\n    }\n\n    public function show(Request $request, Comment $comment): CommentResource\n    {\n        $this->authorize('view', $comment);\n\n        return new CommentResource($comment);\n    }\n\n    public function update(\n        CommentUpdateRequest $request,\n        Comment $comment\n    ): CommentResource {\n        $this->authorize('update', $comment);\n\n        $validated = $request->validated();\n\n        $comment->update($validated);\n\n        return new CommentResource($comment);\n    }\n\n    public function destroy(Request $request, Comment $comment): Response\n    {\n        $this->authorize('delete', $comment);\n\n        $comment->delete();\n\n        return response()->noContent();\n    }\n}\n","module":"crud:15","path":"\\app\\Http\\Controllers\\Api\\CommentController.php"},"\\tests\\Feature\\Api\\CommentTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Comment;\n\nuse App\\Models\\Photo;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass CommentTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_comments_list(): void\n    {\n        $comments = Comment::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->getJson(route('api.comments.index'));\n\n        $response->assertOk()->assertSee($comments[0]->comment);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_comment(): void\n    {\n        $data = Comment::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->postJson(route('api.comments.store'), $data);\n\n        $this->assertDatabaseHas('comments', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_comment(): void\n    {\n        $comment = Comment::factory()->create();\n\n        $photo = Photo::factory()->create();\n\n        $data = [\n            'comment' => $this->faker->text(),\n            'photo_id' => $photo->id,\n        ];\n\n        $response = $this->putJson(\n            route('api.comments.update', $comment),\n            $data\n        );\n\n        $data['id'] = $comment->id;\n\n        $this->assertDatabaseHas('comments', $data);\n\n        $response->assertOk()->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_comment(): void\n    {\n        $comment = Comment::factory()->create();\n\n        $response = $this->deleteJson(route('api.comments.destroy', $comment));\n\n        $this->assertModelMissing($comment);\n\n        $response->assertNoContent();\n    }\n}\n","module":"crud:15","path":"\\tests\\Feature\\Api\\CommentTest.php"}},"skippedFiles":{},"removedModules":[],"migrationsDate":"2023_06_26","lastForeignAlias":0,"cascadeDeleteAsDefault":true,"cascadeUpdateAsDefault":true,"hasFixedForeignCallbacks":true,"hasFixedMigrations":true,"hasFixedHasManyDetailOnPageFields":true,"hasFixedLongForeignIndexName":false,"hasFixedEntityMigrationsGeneration":true,"pluginsData":{"app.vemto.admin-lte":{"sidebarMode":"dark","sidebarCollapsed":false}},"templatesData":{},"usesVite":true,"id":5,"createdAt":"2023-06-26 10:32:03","updatedAt":"2023-06-27 12:30:59"}},"manytomanycomponents":{},"hasmanydetails":{},"manytomanydetails":{},"dependentselects":{},"manytomanyrelationships":{},"hasmanythroughrelatioships":{},"comments":{}},"exportedItems":["projects:5"],"exportedRelationships":["Project:5:cruds","Crud:11:inputs","Crud:11:manyToManyComponents","Crud:11:hasManyDetails","Crud:11:manyToManyDetails","Crud:11:dependentSelects","Crud:12:inputs","Crud:12:manyToManyComponents","Crud:12:hasManyDetails","Crud:12:manyToManyDetails","Crud:12:dependentSelects","Crud:13:inputs","Crud:13:manyToManyComponents","Crud:13:hasManyDetails","Crud:13:manyToManyDetails","Crud:13:dependentSelects","Crud:14:inputs","Crud:14:manyToManyComponents","Crud:14:hasManyDetails","Crud:14:manyToManyDetails","Crud:14:dependentSelects","Crud:15:inputs","Crud:15:manyToManyComponents","Crud:15:hasManyDetails","Crud:15:manyToManyDetails","Crud:15:dependentSelects","Project:5:entities","Entity:16:authProject","Entity:16:cruds","Entity:16:fields","Field:69:inputs","Field:69:foreign","Field:69:relatedForeigns","Field:69:basicParentRelationships","Field:69:basicForeignRelationships","Field:69:manyToManyModelRelationships","Field:69:manyToManylocalModelRelationships","Field:69:typedMorphRelationships","Field:69:identifiedMorphRelationships","Field:70:inputs","Field:70:foreign","Foreign:7:inputs","Field:70:relatedForeigns","Field:70:basicParentRelationships","Field:70:basicForeignRelationships","BasicRelationship:14:inputs","BasicRelationship:14:contrary","BasicRelationship:13:inputs","BasicRelationship:13:contrary","BasicRelationship:14:hasManyDetails","BasicRelationship:13:hasManyDetails","Field:70:manyToManyModelRelationships","Field:70:manyToManylocalModelRelationships","Field:70:typedMorphRelationships","Field:70:identifiedMorphRelationships","Field:74:inputs","Field:74:foreign","Field:74:relatedForeigns","Field:74:basicParentRelationships","Field:74:basicForeignRelationships","Field:74:manyToManyModelRelationships","Field:74:manyToManylocalModelRelationships","Field:74:typedMorphRelationships","Field:74:identifiedMorphRelationships","Entity:16:foreigns","Entity:16:pivotRelationships","Entity:16:pivotMorphRelationships","Entity:16:basicRelationships","Entity:16:hasManyThroughRelationships","Entity:16:basicRelatedRelationships","Entity:16:manyToManyRelationships","Entity:16:manyToManyRelatedRelationships","Entity:16:morphRelationships","Entity:16:morphRelatedRelationships","Entity:14:authProject","Entity:14:cruds","Entity:14:fields","Field:63:inputs","Field:63:foreign","Field:63:relatedForeigns","Foreign:6:inputs","Foreign:9:inputs","Field:63:basicParentRelationships","BasicRelationship:12:inputs","BasicRelationship:12:contrary","BasicRelationship:11:inputs","BasicRelationship:11:contrary","BasicRelationship:12:hasManyDetails","BasicRelationship:11:hasManyDetails","BasicRelationship:18:inputs","BasicRelationship:18:contrary","BasicRelationship:17:inputs","BasicRelationship:17:contrary","BasicRelationship:18:hasManyDetails","BasicRelationship:17:hasManyDetails","Field:63:basicForeignRelationships","Field:63:manyToManyModelRelationships","Field:63:manyToManylocalModelRelationships","Field:63:typedMorphRelationships","Field:63:identifiedMorphRelationships","Field:64:inputs","Field:64:foreign","Field:64:relatedForeigns","Field:64:basicParentRelationships","Field:64:basicForeignRelationships","Field:64:manyToManyModelRelationships","Field:64:manyToManylocalModelRelationships","Field:64:typedMorphRelationships","Field:64:identifiedMorphRelationships","Field:65:inputs","Field:65:foreign","Field:65:relatedForeigns","Field:65:basicParentRelationships","Field:65:basicForeignRelationships","Field:65:manyToManyModelRelationships","Field:65:manyToManylocalModelRelationships","Field:65:typedMorphRelationships","Field:65:identifiedMorphRelationships","Field:75:inputs","Field:75:foreign","Field:75:relatedForeigns","Field:75:basicParentRelationships","Field:75:basicForeignRelationships","Field:75:manyToManyModelRelationships","Field:75:manyToManylocalModelRelationships","Field:75:typedMorphRelationships","Field:75:identifiedMorphRelationships","Field:66:inputs","Field:66:foreign","Field:66:relatedForeigns","Field:66:basicParentRelationships","Field:66:basicForeignRelationships","Field:66:manyToManyModelRelationships","Field:66:manyToManylocalModelRelationships","Field:66:typedMorphRelationships","Field:66:identifiedMorphRelationships","Field:76:inputs","Field:76:foreign","Foreign:8:inputs","Field:76:relatedForeigns","Field:76:basicParentRelationships","Field:76:basicForeignRelationships","BasicRelationship:16:inputs","BasicRelationship:16:contrary","BasicRelationship:15:inputs","BasicRelationship:15:contrary","BasicRelationship:16:hasManyDetails","BasicRelationship:15:hasManyDetails","Field:76:manyToManyModelRelationships","Field:76:manyToManylocalModelRelationships","Field:76:typedMorphRelationships","Field:76:identifiedMorphRelationships","Entity:14:foreigns","Entity:14:pivotRelationships","Entity:14:pivotMorphRelationships","Entity:14:basicRelationships","Entity:14:hasManyThroughRelationships","Entity:14:basicRelatedRelationships","Entity:14:manyToManyRelationships","Entity:14:manyToManyRelatedRelationships","Entity:14:morphRelationships","Entity:14:morphRelatedRelationships","Entity:17:authProject","Entity:17:cruds","Entity:17:fields","Field:77:inputs","Field:77:foreign","Field:77:relatedForeigns","Field:77:basicParentRelationships","Field:77:basicForeignRelationships","Field:77:manyToManyModelRelationships","Field:77:manyToManylocalModelRelationships","Field:77:typedMorphRelationships","Field:77:identifiedMorphRelationships","Field:79:inputs","Field:79:foreign","Field:79:relatedForeigns","Field:79:basicParentRelationships","Field:79:basicForeignRelationships","Field:79:manyToManyModelRelationships","Field:79:manyToManylocalModelRelationships","Field:79:typedMorphRelationships","Field:79:identifiedMorphRelationships","Field:78:inputs","Field:78:foreign","Field:78:relatedForeigns","Field:78:basicParentRelationships","Field:78:basicForeignRelationships","Field:78:manyToManyModelRelationships","Field:78:manyToManylocalModelRelationships","Field:78:typedMorphRelationships","Field:78:identifiedMorphRelationships","Entity:17:foreigns","Entity:17:pivotRelationships","Entity:17:pivotMorphRelationships","Entity:17:basicRelationships","Entity:17:hasManyThroughRelationships","Entity:17:basicRelatedRelationships","Entity:17:manyToManyRelationships","Entity:17:manyToManyRelatedRelationships","Entity:17:morphRelationships","Entity:17:morphRelatedRelationships","Entity:15:authProject","Entity:15:cruds","Entity:15:fields","Field:67:inputs","Field:67:foreign","Field:67:relatedForeigns","Field:67:basicParentRelationships","Field:67:basicForeignRelationships","Field:67:manyToManyModelRelationships","Field:67:manyToManylocalModelRelationships","Field:67:typedMorphRelationships","Field:67:identifiedMorphRelationships","Field:68:inputs","Field:68:foreign","Field:68:relatedForeigns","Field:68:basicParentRelationships","Field:68:basicForeignRelationships","Field:68:manyToManyModelRelationships","Field:68:manyToManylocalModelRelationships","Field:68:typedMorphRelationships","Field:68:identifiedMorphRelationships","Field:73:inputs","Field:73:foreign","Field:73:relatedForeigns","Field:73:basicParentRelationships","Field:73:basicForeignRelationships","Field:73:manyToManyModelRelationships","Field:73:manyToManylocalModelRelationships","Field:73:typedMorphRelationships","Field:73:identifiedMorphRelationships","Entity:15:foreigns","Entity:15:pivotRelationships","Entity:15:pivotMorphRelationships","Entity:15:basicRelationships","Entity:15:hasManyThroughRelationships","Entity:15:basicRelatedRelationships","Entity:15:manyToManyRelationships","Entity:15:manyToManyRelatedRelationships","Entity:15:morphRelationships","Entity:15:morphRelatedRelationships","Entity:13:authProject","Project:5:comments","Entity:13:cruds","Entity:13:fields","Field:57:inputs","Field:57:foreign","Field:57:relatedForeigns","Field:57:basicParentRelationships","Field:57:basicForeignRelationships","Field:57:manyToManyModelRelationships","Field:57:manyToManylocalModelRelationships","Field:57:typedMorphRelationships","Field:57:identifiedMorphRelationships","Field:58:inputs","Field:58:foreign","Field:58:relatedForeigns","Field:58:basicParentRelationships","Field:58:basicForeignRelationships","Field:58:manyToManyModelRelationships","Field:58:manyToManylocalModelRelationships","Field:58:typedMorphRelationships","Field:58:identifiedMorphRelationships","Field:59:inputs","Field:59:foreign","Field:59:relatedForeigns","Field:59:basicParentRelationships","Field:59:basicForeignRelationships","Field:59:manyToManyModelRelationships","Field:59:manyToManylocalModelRelationships","Field:59:typedMorphRelationships","Field:59:identifiedMorphRelationships","Field:60:inputs","Field:60:foreign","Field:60:relatedForeigns","Field:60:basicParentRelationships","Field:60:basicForeignRelationships","Field:60:manyToManyModelRelationships","Field:60:manyToManylocalModelRelationships","Field:60:typedMorphRelationships","Field:60:identifiedMorphRelationships","Field:61:inputs","Field:61:foreign","Field:61:relatedForeigns","Field:61:basicParentRelationships","Field:61:basicForeignRelationships","Field:61:manyToManyModelRelationships","Field:61:manyToManylocalModelRelationships","Field:61:typedMorphRelationships","Field:61:identifiedMorphRelationships","Field:62:inputs","Field:62:foreign","Field:62:relatedForeigns","Field:62:basicParentRelationships","Field:62:basicForeignRelationships","Field:62:manyToManyModelRelationships","Field:62:manyToManylocalModelRelationships","Field:62:typedMorphRelationships","Field:62:identifiedMorphRelationships","Entity:13:foreigns","Entity:13:pivotRelationships","Entity:13:pivotMorphRelationships","Entity:13:basicRelationships","Entity:13:hasManyThroughRelationships","Entity:13:basicRelatedRelationships","Entity:13:manyToManyRelationships","Entity:13:manyToManyRelatedRelationships","Entity:13:morphRelationships","Entity:13:morphRelatedRelationships"]}